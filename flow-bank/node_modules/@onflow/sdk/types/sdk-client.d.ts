import { SdkClientOptions } from "./context/context";
/**
 * Creates an SDK client with the provided options.
 * @param options - Configuration options for the SDK client.
 * @returns A client object with methods to interact with the Flow blockchain.
 * @example
 * const client = createSdkClient({
 *  accessNodeUrl: "https://rest-mainnet.onflow.org",
 *  transport: myTransport,
 *  computeLimit: 1000,
 * })
 * client.send([myScript, myTransaction])
 *   .then(client.decode)
 *   .catch(error => console.error("Error sending request:", error))
 */
export declare function createSdkClient(options: SdkClientOptions): {
    send: (args?: (import("./sdk").InteractionBuilderFn | false) | (import("./sdk").InteractionBuilderFn | false)[], opts?: any) => Promise<any>;
    subscribe: <T extends import("@onflow/typedefs").SubscriptionTopic>({ topic, args, onData, onError }: import("./transport").SubscribeParams<T>, opts?: {
        node?: string;
        transport?: import("@onflow/typedefs").SdkTransport;
    }) => import("@onflow/typedefs").Subscription;
    subscribeRaw: <T extends import("@onflow/typedefs").SubscriptionTopic>({ topic, args, onData, onError }: import("./transport").SubscribeRawParams<T>, opts?: {
        node?: string;
        transport?: import("@onflow/typedefs").SdkTransport;
    }) => {
        unsubscribe: () => void;
    };
    account: (address: string, { height, id, isSealed }?: import("./account/account").AccountQueryOptions, opts?: object) => Promise<import("@onflow/typedefs").Account>;
    block: ({ sealed, id, height }?: import("./block/block").BlockQueryOptions, opts?: object) => Promise<import("@onflow/typedefs").Block>;
    resolve: (ix: import("@onflow/typedefs").Interaction) => Promise<import("@onflow/typedefs").Interaction>;
    decode: (response: any) => Promise<any>;
};
