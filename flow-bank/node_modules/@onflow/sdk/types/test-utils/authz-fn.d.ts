import { InteractionAccount } from "@onflow/typedefs";
/**
 * Generates a unique identifier for an account based on its address and key ID.
 *
 * @param acct The account object
 * @returns A string identifier in the format "address-keyId"
 */
export declare const idof: (acct: InteractionAccount) => string;
/**
 * Generates a test signature string for an account.
 *
 * @param opts Partial account object containing address and keyId
 * @returns A test signature string in the format "SIGNATURE.address.keyId"
 */
export declare function sig(opts: Partial<InteractionAccount>): string;
interface IAuthzOpts {
    signingFunction?: (signable: any) => any;
}
/**
 * Creates a test authorization function for testing transactions.
 *
 * @param opts Optional configuration including custom signing function
 * @returns An authorization function that can be used in tests
 */
export declare function authzFn(opts?: IAuthzOpts): (account: Partial<InteractionAccount>) => Partial<InteractionAccount>;
interface IAuthzResolveOpts {
    tempId?: string;
}
/**
 * Creates a test authorization resolver that can be used for testing account resolution.
 *
 * @param opts Optional configuration including temporary ID
 * @returns A function that returns an account with resolve capability
 */
export declare function authzResolve(opts?: IAuthzResolveOpts): (account: InteractionAccount) => {
    tempId: string;
    resolve: (account: Partial<InteractionAccount>) => Partial<InteractionAccount>;
    kind: import("@onflow/typedefs").InteractionResolverKind.ACCOUNT;
    addr: string | null;
    keyId: number | string | null;
    sequenceNum: number | null;
    signature: string | null;
    signingFunction: any | null;
    role: {
        proposer: boolean;
        authorizer: boolean;
        payer: boolean;
        param?: boolean;
    };
    authorization: any;
};
interface IAuthzResolveMany {
    tempId?: string;
    authorizations: any[];
    proposer?: any;
    payer?: any;
}
/**
 * Creates a test authorization resolver that handles multiple accounts with different roles.
 *
 * @param opts Configuration including authorizations array and optional proposer/payer
 * @returns A function that returns an account with multi-role resolve capability
 */
export declare function authzResolveMany(opts?: IAuthzResolveMany): (account: InteractionAccount) => InteractionAccount;
/**
 * Creates a deep test authorization resolver with nested resolution for complex testing scenarios.
 *
 * @param opts Configuration including authorizations array and optional proposer/payer
 * @param depth The depth of nesting for the resolver (default: 1)
 * @returns A function that returns an account with deep nested resolve capability
 */
export declare function authzDeepResolveMany(opts?: IAuthzResolveMany, depth?: number): (account: InteractionAccount) => InteractionAccount;
export {};
