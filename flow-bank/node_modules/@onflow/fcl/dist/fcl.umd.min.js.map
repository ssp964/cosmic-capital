{"version":3,"file":"fcl.umd.min.js","sources":["../src/utils/async.ts","../src/discovery/rpc/requests.ts","../src/discovery/rpc/handlers/exec-service.ts","../src/discovery/rpc/handlers/request-wc-qr.ts","../src/discovery/rpc/client.ts","../src/discovery/exec-hook.ts","../src/utils/walletconnect/loader.ts","../src/client.ts","../src/discovery/exec-discovery.ts","../src/utils/web/render-frame.js","../src/utils/web/render-pop.js","../src/utils/web/render-tab.js","../src/utils/web/default-config.js","../src/utils/web/strategies/utils/frame.js","../src/VERSION.ts","../src/utils/web/strategies/utils/pop.js","../src/utils/web/strategies/utils/tab.js","../src/utils/web/strategies/utils/extension.js","../src/utils/web/exec-local.js","../src/utils/web/coreStrategies.js","../src/utils/web/strategies/iframe-rpc.js","../src/utils/web/strategies/pop-rpc.js","../src/utils/web/strategies/tab-rpc.js","../src/utils/web/strategies/ext-rpc.js","../src/utils/web/storage.ts","../src/fcl.ts"],"sourcesContent":["const AbortController =\n  globalThis.AbortController || require(\"abort-controller\")\n\nexport function wrapAbortSignal(signal?: AbortSignal) {\n  const controller = new AbortController()\n  if (signal?.aborted) controller.abort()\n  signal?.addEventListener(\"abort\", () => controller.abort())\n  return controller\n}\n","import {RpcClient, RpcNotification} from \"@onflow/util-rpc\"\n\nexport type DiscoveryRpc = RpcClient<{}, DiscoveryNotifications>\n\nexport enum DiscoveryNotification {\n  NOTIFY_QRCODE_CONNECTING = \"notifyQrCodeConnecting\",\n  NOTIFY_QRCODE_CONNECTED = \"notifyQrCodeConnected\",\n  NOTIFY_QRCODE_ERROR = \"notifyQrCodeError\",\n}\n\nexport enum FclRequest {\n  REQUEST_WALLETCONNECT_QRCODE = \"requestWalletConnectQrCode\",\n  EXEC_SERVICE = \"execService\",\n}\n\nexport type DiscoveryNotifications = {\n  [DiscoveryNotification.NOTIFY_QRCODE_CONNECTING]: RpcNotification<{\n    uri: string\n  }>\n  [DiscoveryNotification.NOTIFY_QRCODE_CONNECTED]: RpcNotification<{\n    uri: string\n  }>\n  [DiscoveryNotification.NOTIFY_QRCODE_ERROR]: RpcNotification<{\n    uri: string\n    error: string\n  }>\n}\n","import {execStrategy, normalizePollingResponse} from \"@onflow/fcl-core\"\nimport {Service} from \"@onflow/typedefs\"\n\nconst APPROVED = \"APPROVED\"\n\n// RPC handler for handling service execution requests (e.g extension service)\nexport const execServiceHandlerFactory =\n  ({\n    onExecResult,\n    execStrategyOpts,\n    execStrategyArgs,\n    abortSignal,\n  }: {\n    onExecResult: (result: any) => void\n    execStrategyOpts: any\n    execStrategyArgs: any\n    abortSignal: AbortSignal\n  }) =>\n  async ({service}: {service: Service}) => {\n    try {\n      const result = await (execStrategy as any)(\n        {\n          ...execStrategyOpts,\n          service,\n          config: execStrategyOpts.config,\n          abortSignal,\n        },\n        // Pass the rest of the arguments (protect against future changes)\n        ...execStrategyArgs.slice(1)\n      )\n\n      const status = normalizePollingResponse(result)?.status || APPROVED\n      if (status === APPROVED) {\n        // Propogrates the result to the execStrategy hook\n        onExecResult(result)\n\n        // Notify Discovery that the service was approved\n        return null\n      } else {\n        // Notify Discovery that the service was rejected\n        throw new Error(result?.reason || \"Service was declined\")\n      }\n    } catch (e: any) {\n      throw new Error(e?.message || \"Service execution failed\")\n    }\n  }\n","import {\n  createSessionProposal,\n  FLOW_METHODS,\n  getProvider,\n  request as wcRequest,\n} from \"@onflow/fcl-wc\"\nimport {DiscoveryNotification, DiscoveryRpc} from \"../requests\"\n\n// RPC handler for handling WalletConnect QR code requests\nexport const wcRequestHandlerFactory = ({\n  rpc,\n  network,\n  onExecResult,\n  authnBody,\n  abortSignal,\n}: {\n  rpc: DiscoveryRpc\n  network: string\n  onExecResult: (result: any) => void\n  authnBody: any\n  abortSignal: AbortSignal\n}) => {\n  const watchQr = watchQrFactory({\n    rpc,\n    authnBody,\n  })\n\n  return async ({}) => {\n    if (abortSignal.aborted) {\n      throw new Error(\"Handler has been terminated\")\n    }\n\n    const provider = await getProvider()\n\n    // Execute WC bypass if session is approved\n    const {uri, approval} = await createSessionProposal({\n      provider,\n      network,\n    })\n\n    // Watch for QR code connection asynchronously\n    watchQr({\n      uri,\n      approval,\n      onExecResult,\n    })\n\n    return {uri}\n  }\n}\n\nexport function watchQrFactory({\n  rpc,\n  authnBody,\n}: {\n  rpc: DiscoveryRpc\n  authnBody: any\n}) {\n  return ({\n    uri,\n    approval,\n    onExecResult,\n  }: {\n    uri: string\n    onExecResult: (result: any) => void\n    approval: any\n  }) => {\n    // Watch for QR code connection & resolve callback if connected\n    setTimeout(async () => {\n      try {\n        const provider = await getProvider()\n        const session = await approval()\n        rpc.notify(DiscoveryNotification.NOTIFY_QRCODE_CONNECTING, {\n          uri,\n        })\n\n        const result = await wcRequest({\n          method: FLOW_METHODS.FLOW_AUTHN,\n          body: authnBody,\n          session,\n          provider,\n        })\n\n        rpc.notify(DiscoveryNotification.NOTIFY_QRCODE_CONNECTED, {\n          uri,\n        })\n        onExecResult(result)\n      } catch (e: any) {\n        rpc.notify(DiscoveryNotification.NOTIFY_QRCODE_ERROR, {\n          uri,\n          error: e?.message,\n        })\n      }\n    }, 0)\n  }\n}\n","import {RpcClient} from \"@onflow/util-rpc\"\nimport {DiscoveryRpc, FclRequest} from \"./requests\"\nimport {execServiceHandlerFactory} from \"./handlers/exec-service\"\nimport {wcRequestHandlerFactory} from \"./handlers/request-wc-qr\"\n\n// Initialize the discovery RPC client\nexport function createDiscoveryRpcClient({\n  onExecResult,\n  body,\n  opts,\n  args,\n  abortSignal,\n}: {\n  onExecResult: (result: any) => void\n  body: any\n  opts: any\n  args: any\n  abortSignal: AbortSignal\n}) {\n  const rpc: DiscoveryRpc = new RpcClient({\n    notifications: [],\n  })\n\n  rpc.on(\n    FclRequest.REQUEST_WALLETCONNECT_QRCODE,\n    wcRequestHandlerFactory({\n      network: opts.config.client.network,\n      rpc,\n      onExecResult,\n      authnBody: body,\n      abortSignal,\n    })\n  )\n  rpc.on(\n    FclRequest.EXEC_SERVICE,\n    execServiceHandlerFactory({\n      onExecResult,\n      execStrategyOpts: opts,\n      execStrategyArgs: args,\n      abortSignal,\n    })\n  )\n\n  return {\n    connect: rpc.connect.bind(rpc),\n    receive: rpc.receive.bind(rpc),\n  }\n}\n","import {execStrategy} from \"@onflow/fcl-core\"\nimport {wrapAbortSignal} from \"../utils/async\"\nimport {createDiscoveryRpcClient} from \"./rpc/client\"\nimport {execDiscovery} from \"./exec-discovery\"\n\nconst AUTHN_SERVICE_TYPE = \"authn\"\n\n// Defines the execStrategy hook for Discovery Service\n// Used to define custom service execution rules for the Discovery Service\nexport async function execStrategyHook(...args: any) {\n  const [opts] = args\n  const {body, abortSignal: baseAbortSignal, service} = opts\n\n  // Ensure the service type is \"auth\" for the execStrategyHook\n  if (service?.type !== AUTHN_SERVICE_TYPE) {\n    console.error(\n      `ERROR: Invalid service type for FCL Discovery execStrategyHook, expected \"${AUTHN_SERVICE_TYPE}\" but got \"${service?.type}\"`\n    )\n    return (execStrategy as any)(...args)\n  }\n\n  // Create an abort controller for this context\n  // Either used to terminate WC bypass proposal loop or the base discovery request\n  const abortController = wrapAbortSignal(baseAbortSignal)\n\n  let discoveryPromise: Promise<any> | undefined\n  const resultPromise = new Promise(async (resolve, reject) => {\n    // Initialize the discovery RPC client\n    const rpc = createDiscoveryRpcClient({\n      onExecResult: resolve,\n      body,\n      opts,\n      args,\n      abortSignal: abortController.signal,\n    })\n\n    // Execute the base discovery request\n    discoveryPromise = execDiscovery({\n      customRpc: rpc,\n      opts,\n      args,\n      abortSignal: abortController.signal,\n    }).then(resolve, reject)\n  })\n\n  // Wait for the result promise to resolve or reject\n  await resultPromise.catch(() => {})\n\n  // Give Discovery time to cleanup\n  await Promise.race([\n    new Promise(resolve => setTimeout(resolve, 1000)),\n    discoveryPromise,\n  ]).catch(() => {})\n\n  // Ensure the abort signal is propagated to all candidates on completion\n  abortController.abort()\n\n  // Return the result\n  return resultPromise\n}\n","import {config, type config as _config} from \"@onflow/config\"\nimport {pluginRegistry} from \"@onflow/fcl-core\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport * as fclWc from \"@onflow/fcl-wc\"\nimport {CoreTypes} from \"@walletconnect/types\"\n\nexport const isServer = typeof window === \"undefined\"\n\nconst getMetadata = (config: {\n  appDetailTitle?: string | null\n  appDetailIcon?: string | null\n  appDetailDescription?: string | null\n  appDetailUrl?: string | null\n}): CoreTypes.Metadata => {\n  const appTitle = config.appDetailTitle\n  const appIcon = config.appDetailIcon\n  const appDescription = config.appDetailDescription\n  const appUrl = config.appDetailUrl\n\n  return {\n    name: appTitle ?? document.title,\n    description: appDescription ?? \"\",\n    url: appUrl ?? window.location.origin,\n    icons: appIcon ? [appIcon] : [],\n  }\n}\n\n// Use previous configuration to check for changes & notify the user that this is not possible\nlet lastConfig: string | null = null\n\n// Only the first configuration will be used\nlet hasLoaded = false\n\nexport function initFclWcLoader() {\n  config.subscribe(async (fullConfig: any) => {\n    const wcConfig = {\n      walletConnectProjectId: fullConfig[\"walletconnect.projectId\"],\n      walletConnectDisableNotifications:\n        fullConfig[\"walletconnect.disableNotifications\"],\n      appDetailTitle: fullConfig[\"app.detail.title\"],\n      appDetailIcon: fullConfig[\"app.detail.icon\"],\n      appDetailDescription: fullConfig[\"app.detail.description\"],\n      appDetailUrl: fullConfig[\"app.detail.url\"],\n    }\n    loadFclWc(wcConfig)\n  })\n}\n\nexport function loadFclWc(wcConfig: {\n  walletConnectProjectId?: string | null\n  walletConnectDisableNotifications?: boolean | null\n  appDetailTitle?: string | null\n  appDetailIcon?: string | null\n  appDetailDescription?: string | null\n  appDetailUrl?: string | null\n}) {\n  // We cannot load WalletConnect plugin on server side\n  if (isServer) {\n    return\n  }\n\n  const projectId: string | undefined | null = wcConfig.walletConnectProjectId\n  const disableNotifications: boolean | undefined | null =\n    wcConfig.walletConnectDisableNotifications\n\n  // Check if the plugin is already loaded by this loader, but with different configuration\n  // The plugin can only be loaded once\n  const previousConfig = lastConfig\n  lastConfig = JSON.stringify(wcConfig, null, 2)\n  if (hasLoaded) {\n    if (previousConfig !== lastConfig) {\n      console.warn(\n        `FCL WalletConnect Plugin has been already loaded with different configuration. It is not possible to change the configuration after the plugin has been loaded.\n\nPrevious configuration:\n${previousConfig}\n\nCurrent configuration:\n${lastConfig}`\n      )\n    }\n    return\n  }\n\n  // If the configuration is not set, we do not load the plugin\n  const isConfigured = !!projectId\n  if (!isConfigured) {\n    return\n  }\n\n  invariant(\n    !!projectId,\n    \"FCL Configuration value for 'walletconnect.projectId' is required\"\n  )\n\n  // Check if the plugin is already loaded manually\n  // Usually this won't happen as it is more likely that the plugin will be loaded by this loader\n  // before the developer has a chance to load it manually, but it's good to check\n  if (pluginRegistry.getPlugins().has(fclWc.SERVICE_PLUGIN_NAME)) {\n    if (!hasLoaded) {\n      console.warn(\n        \"It seems like the FCL WalletConnect plugins has been already loaded manually. This is no longer necessary, please see the documentation for more information.\"\n      )\n    }\n    hasLoaded = true\n    return\n  }\n  hasLoaded = true\n\n  // Load the plugin if not already loaded\n  // We must lazy load the plugin to avoid race conditions\n  // where the developer attempts to use the plugin before\n  // our loader applies the configuration\n  const {providerPromise: _clientPromise, FclWcServicePlugin} = fclWc.initLazy({\n    projectId,\n    metadata: getMetadata(wcConfig),\n    disableNotifications: disableNotifications ?? undefined,\n  })\n  pluginRegistry.add([FclWcServicePlugin])\n}\n","import {\n  createFlowClientCore,\n  SdkTransport,\n  StorageProvider,\n} from \"@onflow/fcl-core\"\nimport {LOCAL_STORAGE} from \"./fcl\"\nimport {execStrategyHook} from \"./discovery/exec-hook\"\nimport {loadFclWc} from \"./utils/walletconnect/loader\"\n\nconst PLATFORM = \"web\"\n\nexport const discoveryOpts = {\n  execStrategy: execStrategyHook,\n}\n\nexport interface FlowClientConfig {\n  // Core network configuration (most commonly used)\n  accessNodeUrl: string // Required - must specify which network to connect to\n  flowNetwork?: string\n  flowJson?: any\n\n  // Wallet/Discovery configuration\n  discoveryWallet?: string\n  discoveryWalletMethod?: string\n  discoveryAuthnEndpoint?: string\n  discoveryAuthnInclude?: string[]\n\n  // WalletConnect configuration\n  walletconnectProjectId?: string\n  walletconnectDisableNotifications?: boolean\n\n  // Storage configuration\n  storage?: StorageProvider\n\n  // App detail properties\n  appDetailTitle?: string\n  appDetailIcon?: string\n  appDetailDescription?: string\n  appDetailUrl?: string\n\n  // Service configuration\n  serviceOpenIdScopes?: string[]\n\n  // Advanced/SDK configuration (least commonly used)\n  transport?: SdkTransport\n  computeLimit?: number\n  customResolver?: any\n  customDecoders?: any\n}\n\nexport function createFlowClient(params: FlowClientConfig) {\n  // TODO: Load into the global plugin registry for now.  This should be\n  // refactored to use a plugin registry bound to the client instance\n  // in the future.\n  loadFclWc({\n    walletConnectProjectId: params.walletconnectProjectId,\n    walletConnectDisableNotifications: params.walletconnectDisableNotifications,\n    appDetailTitle: params.appDetailTitle,\n    appDetailIcon: params.appDetailIcon,\n    appDetailDescription: params.appDetailDescription,\n    appDetailUrl: params.appDetailUrl,\n  })\n\n  const fclCore = createFlowClientCore({\n    flowNetwork: params.flowNetwork,\n    flowJson: params.flowJson,\n    accessNodeUrl: params.accessNodeUrl,\n    computeLimit: params.computeLimit || 9999,\n    transport: params.transport,\n    platform: PLATFORM,\n    storage: params.storage || LOCAL_STORAGE,\n    discovery: discoveryOpts,\n    discoveryWalletMethod: params.discoveryWalletMethod || \"IFRAME/RPC\",\n    discoveryAuthnEndpoint: params.discoveryAuthnEndpoint,\n    discoveryAuthnInclude: params.discoveryAuthnInclude,\n    customResolver: params.customResolver,\n    customDecoders: params.customDecoders,\n    discoveryWallet: params.discoveryWallet,\n    appDetailTitle: params.appDetailTitle,\n    appDetailIcon: params.appDetailIcon,\n    appDetailDescription: params.appDetailDescription,\n    appDetailUrl: params.appDetailUrl,\n    serviceOpenIdScopes: params.serviceOpenIdScopes,\n  })\n\n  return {\n    ...fclCore,\n  }\n}\n","import {execStrategy} from \"@onflow/fcl-core\"\n\nexport async function execDiscovery({\n  customRpc,\n  opts,\n  args,\n  abortSignal,\n}: {\n  customRpc: any\n  opts: any\n  args: any\n  abortSignal: any\n}) {\n  // Update the discovery config to enable RPC support\n  const discoveryConfig = {\n    ...opts.config,\n    client: {\n      ...opts.config.client,\n      discoveryRpcEnabled: true,\n    },\n  }\n\n  // Execute base discovery request\n  return execStrategy(\n    {\n      ...opts,\n      config: discoveryConfig,\n      customRpc,\n      abortSignal,\n    },\n    // @ts-ignore - Pass the rest of the arguments (protect against future changes)\n    ...args.slice(1)\n  )\n}\n","import {invariant} from \"@onflow/util-invariant\"\n\nconst FRAME = \"FCL_IFRAME\"\n\nconst FRAME_STYLES = `\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n  color-scheme: light;\n`\n\nexport function renderFrame(src) {\n  invariant(\n    !document.getElementById(FRAME),\n    \"Attempt at triggering multiple Frames\",\n    {src}\n  )\n\n  const $frame = document.createElement(\"iframe\")\n  $frame.src = src\n  $frame.id = FRAME\n  $frame.allow = \"usb *; hid *; clipboard-write\"\n  $frame.frameBorder = \"0\"\n  $frame.style.cssText = FRAME_STYLES\n  document.body.append($frame)\n\n  const unmount = () => {\n    if (document.getElementById(FRAME)) {\n      document.getElementById(FRAME).remove()\n    }\n  }\n\n  return [$frame.contentWindow, unmount]\n}\n","const POP = \"FCL_POP\"\n\nlet popup = null\nlet previousUrl = null\n\nfunction popupWindow(url, windowName, win, w, h) {\n  const y = win.top.outerHeight / 2 + win.top.screenY - h / 2\n  const x = win.top.outerWidth / 2 + win.top.screenX - w / 2\n  const popup = win.open(\n    url,\n    windowName,\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${y}, left=${x}`\n  )\n  if (!popup)\n    throw new Error(\"Popup failed to open (was it blocked by a popup blocker?)\")\n  return popup\n}\n\nexport function renderPop(src) {\n  if (popup == null || popup?.closed) {\n    popup = popupWindow(src, POP, window, 640, 770)\n  } else if (previousUrl !== src) {\n    popup.location.replace(src)\n    popup.focus()\n  } else {\n    popup.focus()\n  }\n\n  previousUrl = src\n\n  const unmount = () => {\n    if (popup && !popup.closed) {\n      popup.close()\n    }\n    popup = null\n  }\n\n  return [popup, unmount]\n}\n","const TAB = \"FCL_TAB\"\n\nlet tab = null\nlet previousUrl = null\n\nexport function renderTab(src) {\n  if (tab == null || tab?.closed) {\n    tab = window.open(src, \"_blank\")\n    if (!tab)\n      throw new Error(\"Tab failed to open (was it blocked by the browser?)\")\n  } else if (previousUrl !== src) {\n    tab.location.replace(src)\n    tab.focus()\n  } else {\n    tab.focus()\n  }\n\n  previousUrl = src\n\n  const unmount = () => {\n    if (tab && !tab.closed) {\n      tab.close()\n    }\n    tab = null\n  }\n\n  return [tab, unmount]\n}\n","export const getDefaultConfig = () => {\n  return {\n    \"discovery.wallet.method.default\": \"IFRAME/RPC\",\n  }\n}\n","import {renderFrame} from \"../../render-frame\"\nimport {buildMessageHandler, serviceEndpoint} from \"@onflow/fcl-core\"\n\nconst noop = () => {}\n\nexport function frame(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n  const onCustomRpc = opts.onCustomRpc || noop\n\n  let $frame, unmount\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource: () => $frame,\n  })\n  window.addEventListener(\"message\", handler)\n  ;[$frame, unmount] = renderFrame(serviceEndpoint(service))\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Frame Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $frame.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Frame Send Error\", msg, error)\n    }\n  }\n}\n","declare const PACKAGE_CURRENT_VERSION: string | undefined\n\nexport const VERSION: string = PACKAGE_CURRENT_VERSION || \"TESTVERSION\"\n","import {renderPop} from \"../../render-pop\"\nimport {buildMessageHandler, serviceEndpoint} from \"@onflow/fcl-core\"\n\nconst noop = () => {}\n\nexport function pop(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n  const onCustomRpc = opts.onCustomRpc || noop\n\n  let $pop, unmount\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource: () => $pop,\n  })\n  window.addEventListener(\"message\", handler)\n  ;[$pop, unmount] = renderPop(serviceEndpoint(service))\n\n  const timer = setInterval(function () {\n    if ($pop && $pop.closed) {\n      close()\n    }\n  }, 500)\n\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      clearInterval(timer)\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Popup Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $pop.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Popup Send Error\", msg, error)\n    }\n  }\n}\n","import {renderTab} from \"../../render-tab\"\nimport {buildMessageHandler, serviceEndpoint} from \"@onflow/fcl-core\"\n\nconst noop = () => {}\n\nexport function tab(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n  const onCustomRpc = opts.onCustomRpc || noop\n\n  let $tab, unmount\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n    getSource: () => $tab,\n  })\n  window.addEventListener(\"message\", handler)\n  ;[$tab, unmount] = renderTab(serviceEndpoint(service))\n  const timer = setInterval(function () {\n    if ($tab && $tab.closed) {\n      close()\n    }\n  }, 500)\n\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      clearInterval(timer)\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Tab Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $tab.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Tab Send Error\", msg, error)\n    }\n  }\n}\n","import {buildMessageHandler} from \"@onflow/fcl-core\"\n\nconst noop = () => {}\n\nexport function extension(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n  const onCustomRpc = opts.onCustomRpc || noop\n\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n    onCustomRpc,\n  })\n  window.addEventListener(\"message\", handler)\n\n  send({service})\n\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      onClose()\n    } catch (error) {\n      console.error(\"Ext Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      window && window.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Ext Send Error\", msg, error)\n    }\n  }\n}\n","import {renderFrame} from \"./render-frame\"\nimport {renderPop} from \"./render-pop\"\nimport {renderTab} from \"./render-tab\"\n\nconst NOT_IMPLEMENTED = () => {\n  throw new Error(\"Strategy util has not been implemented on this platform\")\n}\n\nconst VIEWS = {\n  \"VIEW/IFRAME\": renderFrame,\n  \"VIEW/POP\": renderPop,\n  \"VIEW/TAB\": renderTab,\n  \"VIEW/MOBILE_BROWSER\": NOT_IMPLEMENTED,\n  \"VIEW/DEEPLINK\": NOT_IMPLEMENTED,\n}\n\nexport async function execLocal(service, opts = {serviceEndpoint: () => {}}) {\n  const {serviceEndpoint} = opts\n  try {\n    return VIEWS[service.method](serviceEndpoint(service), opts)\n  } catch (error) {\n    console.error(\"execLocal({service, opts = {}})\", error, {service, opts})\n    throw error\n  }\n}\n","import {CORE_STRATEGIES, getExecHttpPost} from \"@onflow/fcl-core\"\nimport {execIframeRPC} from \"./strategies/iframe-rpc\"\nimport {execPopRPC} from \"./strategies/pop-rpc\"\nimport {execTabRPC} from \"./strategies/tab-rpc\"\nimport {execExtRPC} from \"./strategies/ext-rpc\"\nimport {execLocal} from \"./exec-local\"\n\nexport const coreStrategies = {\n  [CORE_STRATEGIES[\"HTTP/RPC\"]]: getExecHttpPost(execLocal),\n  [CORE_STRATEGIES[\"HTTP/POST\"]]: getExecHttpPost(execLocal),\n  [CORE_STRATEGIES[\"IFRAME/RPC\"]]: execIframeRPC,\n  [CORE_STRATEGIES[\"POP/RPC\"]]: execPopRPC,\n  [CORE_STRATEGIES[\"TAB/RPC\"]]: execTabRPC,\n  [CORE_STRATEGIES[\"EXT/RPC\"]]: execExtRPC,\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {frame} from \"./utils/frame\"\nimport {normalizePollingResponse} from \"@onflow/fcl-core\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execIframeRPC({\n  service,\n  body,\n  config,\n  customRpc,\n  abortSignal,\n  opts,\n}) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall\n\n    const {close} = frame(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            fclVersion: VERSION,\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n            deprecated: {\n              message:\n                \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n              deprecated: {\n                message:\n                  \"jsonrpc is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n              },\n            })\n          }\n\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                payload: msg,\n              })\n            },\n          })\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n\n      onCustomRpc(msg) {\n        customRpc?.receive(msg)\n      },\n    })\n\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        reject(`Declined: Aborted`)\n        close()\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        reject(`Declined: Aborted`)\n        close()\n      })\n    }\n  })\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {pop} from \"./utils/pop\"\nimport {normalizePollingResponse} from \"@onflow/fcl-core\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execPopRPC({\n  service,\n  body,\n  config,\n  abortSignal,\n  customRpc,\n  opts,\n}) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const {redir, includeOlderJsonRpcCall} = opts\n\n    const {close} = pop(service, {\n      customRpc,\n      async onReady(_, {send}) {\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n            deprecated: {\n              message:\n                \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n            })\n          }\n\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                payload: msg,\n              })\n            },\n          })\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n\n      onCustomRpc(msg) {\n        customRpc?.receive(msg)\n      },\n    })\n\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        reject(`Declined: Aborted`)\n        close()\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        reject(`Declined: Aborted`)\n        close()\n      })\n    }\n  })\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {tab} from \"./utils/tab\"\nimport {normalizePollingResponse} from \"@onflow/fcl-core\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execTabRPC({\n  service,\n  body,\n  config,\n  abortSignal,\n  customRpc,\n  opts,\n}) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const {redir, includeOlderJsonRpcCall} = opts\n\n    const {close} = tab(service, {\n      customRpc,\n      async onReady(_, {send}) {\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n            deprecated: {\n              message:\n                \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n            })\n          }\n\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                payload: msg,\n              })\n            },\n          })\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n\n      onCustomRpc(msg) {\n        customRpc?.receive(msg)\n      },\n    })\n\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        close()\n        reject(`Declined: Aborted`)\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        close()\n        reject(`Declined: Aborted`)\n      })\n    }\n  })\n}\n","import {extension} from \"./utils/extension\"\nimport {normalizePollingResponse} from \"@onflow/fcl-core\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execExtRPC({\n  service,\n  body,\n  config,\n  abortSignal,\n  customRpc,\n  opts,\n}) {\n  return new Promise((resolve, reject) => {\n    const {close} = extension(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n\n          customRpc?.connect({\n            send: msg => {\n              send({\n                type: \"FCL:VIEW:CUSTOM_RPC\",\n                body: msg,\n              })\n            },\n          })\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execExtRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n\n      onCustomRpc(msg) {\n        customRpc?.receive(msg)\n      },\n    })\n\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        close()\n        reject(`Declined: Aborted`)\n      }\n      abortSignal.addEventListener(\"abort\", () => {\n        close()\n        reject(`Declined: Aborted`)\n      })\n    }\n  })\n}\n","import {StorageProvider} from \"@onflow/fcl-core\"\n\nconst isServerSide = () => typeof window === \"undefined\"\nconst safeParseJSON = (str?: string | null) => {\n  if (str == null) return null\n  try {\n    return JSON.parse(str)\n  } catch (error) {\n    return null\n  }\n}\n\nexport const SESSION_STORAGE = {\n  can: !isServerSide() && !!window.sessionStorage,\n  get: async (key: string) => safeParseJSON(sessionStorage.getItem(key)),\n  put: async (key: string, value: any) =>\n    sessionStorage.setItem(key, JSON.stringify(value)),\n} as StorageProvider\n\nexport const LOCAL_STORAGE = {\n  can: !isServerSide() && !!window.localStorage,\n  get: async (key: string) => safeParseJSON(localStorage.getItem(key)),\n  put: async (key: string, value: any) =>\n    localStorage.setItem(key, JSON.stringify(value)),\n} as StorageProvider\n","export {\n  VERSION,\n  query,\n  queryRaw,\n  verifyUserSignatures,\n  serialize,\n  tx,\n  events,\n  pluginRegistry,\n  discovery,\n  t,\n  WalletUtils,\n  AppUtils,\n  InteractionTemplateUtils,\n  getChainId,\n  TestUtils,\n  config,\n  flowMainnet,\n  flowTestnet,\n  flowEmulator,\n  send,\n  decode,\n  account,\n  block,\n  isOk,\n  isBad,\n  why,\n  pipe,\n  build,\n  withPrefix,\n  sansPrefix,\n  display,\n  cadence,\n  cdc,\n  createSignableVoucher,\n  voucherIntercept,\n  voucherToTxId,\n  transaction,\n  script,\n  ping,\n  atBlockHeight,\n  atBlockId,\n  getAccount,\n  getEvents,\n  getEventsAtBlockHeightRange,\n  getEventsAtBlockIds,\n  getBlock,\n  getBlockHeader,\n  getCollection,\n  getTransactionStatus,\n  getTransaction,\n  getNetworkParameters,\n  getNodeVersionInfo,\n  authorizations,\n  authorization,\n  args,\n  arg,\n  proposer,\n  payer,\n  limit,\n  ref,\n  params,\n  param,\n  validator,\n  invariant,\n  subscribeEvents,\n  nodeVersionInfo,\n  TransactionError,\n} from \"@onflow/fcl-core\"\n\nimport {\n  getMutate,\n  getCurrentUser,\n  initServiceRegistry,\n  StorageProvider,\n} from \"@onflow/fcl-core\"\nimport {discoveryOpts} from \"./client\"\n\n/**\n * @description The main current user service for managing user authentication and authorization in Flow applications.\n * This service provides a complete interface for wallet connections, user sessions, transaction signing, and user data management.\n * It handles the complexity of connecting to various FCL-compatible wallets, managing authentication state, and providing\n * authorization functions for transaction signing.\n *\n * The currentUser service is configured for web platforms and uses the browser's localStorage by default for session persistence.\n * It integrates with Flow's discovery service to enable wallet selection and supports both authentication and re-authentication flows.\n *\n * This service is reactive and provides subscription capabilities to monitor authentication state changes in real-time.\n * All wallet interactions are handled through FCL's standardized protocols, ensuring compatibility with the Flow ecosystem.\n *\n * Returns an object with the following methods:\n * ```typescript\n * {\n *   authenticate,        // Authenticates the user via FCL-compatible wallets\n *   unauthenticate,      // Logs out the current user and clears session data\n *   authorization,       // Produces authorization details for transaction signing\n *   signUserMessage,     // Signs arbitrary messages with the user's wallet\n *   subscribe,           // Subscribes to authentication state changes\n *   snapshot,            // Returns the current user object snapshot\n *   resolveArgument      // Resolves the current user as a transaction argument\n * }\n * ```\n *\n * @returns A CurrentUserService object\n *\n * @example\n * // Basic authentication flow\n * import * as fcl from \"@onflow/fcl\"\n *\n * // Configure FCL\n * fcl.config({\n *   \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n *   \"discovery.wallet\": \"https://fcl-discovery.onflow.org/testnet/authn\",\n *   \"flow.network\": \"testnet\"\n * })\n *\n * // Authenticate user\n * const user = await fcl.currentUser.authenticate()\n * console.log(\"User authenticated:\", user.addr)\n *\n * // Check authentication status\n * const currentUser = await fcl.currentUser.snapshot()\n * if (currentUser.loggedIn) {\n *   console.log(\"User is logged in:\", currentUser.addr)\n * }\n *\n * // Subscribe to authentication state changes\n * import * as fcl from \"@onflow/fcl\"\n *\n * const unsubscribe = fcl.currentUser.subscribe((user) => {\n *   if (user.loggedIn) {\n *     console.log(\"User logged in:\", user.addr)\n *     document.getElementById(\"login-btn\").style.display = \"none\"\n *     document.getElementById(\"logout-btn\").style.display = \"block\"\n *   } else {\n *     console.log(\"User logged out\")\n *     document.getElementById(\"login-btn\").style.display = \"block\"\n *     document.getElementById(\"logout-btn\").style.display = \"none\"\n *   }\n * })\n * // Clean up subscription when component unmounts\n * window.addEventListener(\"beforeunload\", () => unsubscribe())\n */\nexport const currentUser = getCurrentUser({\n  platform: \"web\",\n  discovery: discoveryOpts,\n  getStorageProvider: async () => {\n    return (\n      (await config.get<StorageProvider | null>(\"fcl.storage\")) || LOCAL_STORAGE\n    )\n  },\n})\n\n/**\n * @description A transaction execution function that allows you to submit Cadence transactions to the Flow blockchain\n * to mutate on-chain state. This function handles the complete transaction lifecycle including building, signing, and\n * sending transactions to Flow. It provides a high-level interface that abstracts the complexity of transaction\n * construction while offering flexibility for advanced use cases.\n *\n * The mutate function automatically handles authorization using the current authenticated user by default, but allows\n * for custom authorization functions to be specified for different transaction roles (proposer, payer, authorizer).\n * It supports both simple single-party transactions and complex multi-party transactions with different signatories.\n *\n * This function integrates with FCL's address replacement system, allowing you to use placeholder addresses in your\n * Cadence code that are replaced with actual addresses at execution time. It also supports Interaction Templates\n * for standardized transaction execution patterns.\n *\n * The mutate function accepts a configuration object with the following structure:\n * ```typescript\n * {\n *   cadence?: string,                    // The Cadence transaction code to execute (required if template not provided)\n *   args?: Function,                     // Function that returns an array of arguments for the transaction\n *   template?: any,                      // Interaction Template object or URL for standardized transactions\n *   limit?: number,                      // Compute (gas) limit for the transaction execution\n *   authz?: AccountAuthorization,        // Authorization function for all signatory roles (proposer, payer, authorizer)\n *   proposer?: AccountAuthorization,     // Specific authorization function for the proposer role\n *   payer?: AccountAuthorization,        // Specific authorization function for the payer role\n *   authorizations?: AccountAuthorization[]  // Array of authorization functions for authorizer roles\n * }\n * ```\n *\n * @param opts Transaction configuration options\n *\n * @returns Promise that resolves to the transaction ID (txId) when the transaction is submitted\n *\n * @throws Throws an error if transaction validation fails, required configuration is missing,\n * or transaction execution encounters an error\n *\n * @example\n * // Basic transaction submission\n * import * as fcl from \"@onflow/fcl\"\n *\n * // Configure FCL first\n * fcl.config({\n *   \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n *   \"discovery.wallet\": \"https://fcl-discovery.onflow.org/testnet/authn\",\n *   \"flow.network\": \"testnet\"\n * })\n *\n * // Authenticate user\n * await fcl.authenticate()\n *\n * // Submit a basic transaction\n * const txId = await fcl.mutate({\n *   cadence: `\n *     transaction(message: String) {\n *       prepare(account: AuthAccount) {\n *         log(\"Transaction executed by: \".concat(account.address.toString()))\n *         log(\"Message: \".concat(message))\n *       }\n *     }\n *   `,\n *   args: (arg, t) => [\n *     arg(\"Hello Flow!\", t.String)\n *   ],\n *   limit: 50\n * })\n *\n * console.log(\"Transaction submitted:\", txId)\n */\nexport const mutate = getMutate(currentUser)\n\n/**\n * @description Calling this method will authenticate the current user via any wallet that supports FCL. Once called, FCL will initiate communication with the configured `discovery.wallet` endpoint which lets the user select a wallet to authenticate with. Once the wallet provider has authenticated the user, FCL will set the values on the current user object for future use and authorization.\n *\n * This method can only be used in web browsers.\n *\n * `discovery.wallet` value must be set in the configuration before calling this method. See FCL Configuration.\n *\n * The default discovery endpoint will open an iframe overlay to let the user choose a supported wallet.\n *\n * `authenticate` can also take a service returned from discovery with `fcl.authenticate({ service })`.\n *\n * @param opts Authentication options\n * @param opts.service Optional service to use for authentication. A service returned from discovery can be passed here.\n * @param opts.redir Optional redirect flag. Defaults to false.\n * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.\n * @returns Promise that resolves to the authenticated CurrentUser object or undefined\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * fcl\n *   .config()\n *   .put('accessNode.api', 'https://rest-testnet.onflow.org')\n *   .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\n * // anywhere on the page\n * fcl.authenticate();\n */\nexport const authenticate = (opts = {}) => currentUser().authenticate(opts)\n\n/**\n * @description Logs out the current user and sets the values on the current user object to null.\n *\n * This method can only be used in web browsers.\n *\n * The current user must be authenticated first.\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * fcl.config().put('accessNode.api', 'https://rest-testnet.onflow.org');\n * // first authenticate to set current user\n * fcl.authenticate();\n * // ... somewhere else & sometime later\n * fcl.unauthenticate();\n * // fcl.currentUser.loggedIn === null\n */\nexport const unauthenticate = () => currentUser().unauthenticate()\n\n/**\n * @description A convenience method that calls `fcl.unauthenticate()` and then `fcl.authenticate()` for the current user.\n *\n * This method can only be used in web browsers.\n *\n * The current user must be authenticated first.\n *\n * @param opts Authentication options passed to authenticate method\n * @param opts.service Optional service to use for authentication\n * @param opts.redir Optional redirect flag. Defaults to false.\n * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.\n * @returns Promise that resolves to the authenticated CurrentUser object or undefined\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * // first authenticate to set current user\n * fcl.authenticate();\n * // ... somewhere else & sometime later\n * fcl.reauthenticate();\n * // logs out user and opens up login/sign-up flow\n */\nexport const reauthenticate = (opts = {}) => {\n  currentUser().unauthenticate()\n  return currentUser().authenticate(opts)\n}\n\n/**\n * @description A convenience method that calls and is equivalent to `fcl.authenticate()`.\n *\n * This method can only be used in web browsers.\n *\n * @param opts Authentication options passed to authenticate method\n * @param opts.service Optional service to use for authentication\n * @param opts.redir Optional redirect flag. Defaults to false.\n * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.\n * @returns Promise that resolves to the authenticated CurrentUser object or undefined\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * fcl.config()\n *   .put('accessNode.api', 'https://rest-testnet.onflow.org')\n *   .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\n *\n * // User clicks sign up button\n * fcl.signUp();\n */\nexport const signUp = (opts = {}) => currentUser().authenticate(opts)\n\n/**\n * @description A convenience method that calls and is equivalent to `fcl.authenticate()`.\n *\n * This method can only be used in web browsers.\n *\n * @param opts Authentication options passed to authenticate method\n * @param opts.service Optional service to use for authentication\n * @param opts.redir Optional redirect flag. Defaults to false.\n * @param opts.forceReauth Optional force re-authentication flag. Defaults to false.\n * @returns Promise that resolves to the authenticated CurrentUser object or undefined\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * fcl.config()\n *   .put('accessNode.api', 'https://rest-testnet.onflow.org')\n *   .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\n *\n * // User clicks log in button\n * fcl.logIn();\n */\nexport const logIn = (opts = {}) => currentUser().authenticate(opts)\n\n/**\n * @description A convenience method that produces the needed authorization details for the current user to submit transactions to Flow. It defines a signing function that connects to a user's wallet provider to produce signatures to submit transactions.\n *\n * You can replace this function with your own authorization function if needed.\n *\n * @returns An object containing the necessary details from the current user to authorize a transaction in any role.\n *\n * @example\n * import * as fcl from '@onflow/fcl';\n * // login somewhere before\n * fcl.authenticate();\n * // once logged in authz will produce values\n * console.log(fcl.authz);\n * // prints {addr, signingFunction, keyId, sequenceNum} from the current authenticated user.\n *\n * const txId = await fcl.mutate({\n *   cadence: `\n *     import Profile from 0xba1132bc08f82fe2\n *\n *     transaction(name: String) {\n *       prepare(account: auth(BorrowValue) &Account) {\n *         account.storage.borrow<&{Profile.Owner}>(from: Profile.privatePath)!.setName(name)\n *       }\n *     }\n *   `,\n *   args: (arg, t) => [arg('myName', t.String)],\n *   proposer: fcl.authz, // optional - default is fcl.authz\n *   payer: fcl.authz, // optional - default is fcl.authz\n *   authorizations: [fcl.authz], // optional - default is [fcl.authz]\n * });\n *\n * @note The default values for `proposer`, `payer`, and `authorizations` are already `fcl.authz` so there is no need to include these parameters, it is shown only for example purposes.\n */\nexport const authz = currentUser().authorization\n\nimport {config} from \"@onflow/config\"\nimport {getDefaultConfig, coreStrategies, LOCAL_STORAGE} from \"./utils/web\"\nimport {initFclWcLoader} from \"./utils/walletconnect/loader\"\n\nconfig(getDefaultConfig())\n\ninitServiceRegistry({coreStrategies})\n\n// Automatically load fcl-wc plugin\n// Based on the user's config\ninitFclWcLoader()\n\nexport {LOCAL_STORAGE, SESSION_STORAGE} from \"./utils/web\"\n\n// Subscriptions\nexport {subscribe, subscribeRaw} from \"@onflow/fcl-core\"\n\nexport * from \"@onflow/typedefs\"\n\nexport {createFlowClient, type FlowClientConfig} from \"./client\"\n"],"names":["AbortController","globalThis","require","DiscoveryNotification","FclRequest","APPROVED","wcRequestHandlerFactory","_ref","rpc","network","onExecResult","authnBody","abortSignal","watchQr","_ref3","_ref4","uri","approval","setTimeout","async","provider","getProvider","session","notify","NOTIFY_QRCODE_CONNECTING","result","wcRequest","method","FLOW_METHODS","FLOW_AUTHN","body","NOTIFY_QRCODE_CONNECTED","e","NOTIFY_QRCODE_ERROR","error","message","watchQrFactory","aborted","Error","createSessionProposal","createDiscoveryRpcClient","opts","args","RpcClient","notifications","on","REQUEST_WALLETCONNECT_QRCODE","config","client","EXEC_SERVICE","execStrategyOpts","execStrategyArgs","service","_ref2","execStrategy","slice","normalizePollingResponse","status","reason","execServiceHandlerFactory","connect","bind","receive","AUTHN_SERVICE_TYPE","isServer","window","getMetadata","appTitle","appDetailTitle","appIcon","appDetailIcon","appDescription","appDetailDescription","appUrl","appDetailUrl","name","document","title","description","url","location","origin","icons","lastConfig","hasLoaded","loadFclWc","wcConfig","projectId","walletConnectProjectId","disableNotifications","walletConnectDisableNotifications","previousConfig","JSON","stringify","console","warn","invariant","pluginRegistry","getPlugins","has","fclWc","SERVICE_PLUGIN_NAME","providerPromise","_clientPromise","FclWcServicePlugin","initLazy","metadata","undefined","add","discoveryOpts","_len","arguments","length","Array","_key","baseAbortSignal","type","abortController","signal","controller","abort","addEventListener","wrapAbortSignal","discoveryPromise","resultPromise","Promise","resolve","reject","customRpc","discoveryConfig","discoveryRpcEnabled","execDiscovery","then","catch","race","FRAME","renderFrame","src","getElementById","$frame","createElement","id","allow","frameBorder","style","cssText","append","contentWindow","unmount","remove","popup","previousUrl","renderPop","closed","windowName","win","w","h","y","top","outerHeight","screenY","x","outerWidth","screenX","open","popupWindow","replace","focus","close","tab","renderTab","noop","VERSION","NOT_IMPLEMENTED","VIEWS","execLocal","serviceEndpoint","coreStrategies","CORE_STRATEGIES","getExecHttpPost","uid","includeOlderJsonRpcCall","send","onClose","onMessage","onReady","onResponse","onCustomRpc","handler","buildMessageHandler","getSource","removeEventListener","msg","postMessage","parse","frame","_","fclVersion","params","data","deprecated","jsonrpc","payload","resp","redir","$pop","timer","setInterval","clearInterval","pop","$tab","extension","isServerSide","safeParseJSON","str","SESSION_STORAGE","can","sessionStorage","get","getItem","key","put","value","setItem","LOCAL_STORAGE","localStorage","currentUser","getCurrentUser","platform","discovery","getStorageProvider","mutate","getMutate","authz","authorization","initServiceRegistry","subscribe","fullConfig","authenticate","walletconnectProjectId","walletconnectDisableNotifications","createFlowClientCore","flowNetwork","flowJson","accessNodeUrl","computeLimit","transport","storage","discoveryWalletMethod","discoveryAuthnEndpoint","discoveryAuthnInclude","customResolver","customDecoders","discoveryWallet","serviceOpenIdScopes","unauthenticate"],"mappings":"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"}