/**
 * Represents different types of interactions with the Flow blockchain
 */
var InteractionTag = /*#__PURE__*/function (InteractionTag) {
  InteractionTag["UNKNOWN"] = "UNKNOWN";
  InteractionTag["SCRIPT"] = "SCRIPT";
  InteractionTag["TRANSACTION"] = "TRANSACTION";
  InteractionTag["GET_TRANSACTION_STATUS"] = "GET_TRANSACTION_STATUS";
  InteractionTag["GET_ACCOUNT"] = "GET_ACCOUNT";
  InteractionTag["GET_EVENTS"] = "GET_EVENTS";
  InteractionTag["PING"] = "PING";
  InteractionTag["GET_TRANSACTION"] = "GET_TRANSACTION";
  InteractionTag["GET_BLOCK"] = "GET_BLOCK";
  InteractionTag["GET_BLOCK_HEADER"] = "GET_BLOCK_HEADER";
  InteractionTag["GET_COLLECTION"] = "GET_COLLECTION";
  InteractionTag["GET_NETWORK_PARAMETERS"] = "GET_NETWORK_PARAMETERS";
  InteractionTag["SUBSCRIBE_EVENTS"] = "SUBSCRIBE_EVENTS";
  InteractionTag["GET_NODE_VERSION_INFO"] = "GET_NODE_VERSION_INFO";
  return InteractionTag;
}({});

/**
 * Status of an interaction with the Flow blockchain
 */
var InteractionStatus = /*#__PURE__*/function (InteractionStatus) {
  InteractionStatus["BAD"] = "BAD";
  InteractionStatus["OK"] = "OK";
  return InteractionStatus;
}({});

/**
 * Represents different roles in a transaction
 */
var TransactionRole = /*#__PURE__*/function (TransactionRole) {
  TransactionRole["AUTHORIZER"] = "authorizer";
  TransactionRole["PAYER"] = "payer";
  TransactionRole["PROPOSER"] = "proposer";
  return TransactionRole;
}({});

/**
 * Represents different kinds of interaction resolvers
 */
var InteractionResolverKind = /*#__PURE__*/function (InteractionResolverKind) {
  InteractionResolverKind["ARGUMENT"] = "ARGUMENT";
  InteractionResolverKind["ACCOUNT"] = "ACCOUNT";
  return InteractionResolverKind;
}({});

/**
 * Error codes defined by the Flow Virtual Machine (FVM) for various types of errors that can occur during transaction execution
 */
var FvmErrorCode = /*#__PURE__*/function (FvmErrorCode) {
  FvmErrorCode[FvmErrorCode["UNKNOWN_ERROR"] = -1] = "UNKNOWN_ERROR";
  FvmErrorCode[FvmErrorCode["TX_VALIDATION_ERROR"] = 1000] = "TX_VALIDATION_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_TX_BYTE_SIZE_ERROR"] = 1001] = "INVALID_TX_BYTE_SIZE_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_REFERENCE_BLOCK_ERROR"] = 1002] = "INVALID_REFERENCE_BLOCK_ERROR";
  FvmErrorCode[FvmErrorCode["EXPIRED_TRANSACTION_ERROR"] = 1003] = "EXPIRED_TRANSACTION_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_SCRIPT_ERROR"] = 1004] = "INVALID_SCRIPT_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_GAS_LIMIT_ERROR"] = 1005] = "INVALID_GAS_LIMIT_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_PROPOSAL_SIGNATURE_ERROR"] = 1006] = "INVALID_PROPOSAL_SIGNATURE_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_PROPOSAL_SEQ_NUMBER_ERROR"] = 1007] = "INVALID_PROPOSAL_SEQ_NUMBER_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_PAYLOAD_SIGNATURE_ERROR"] = 1008] = "INVALID_PAYLOAD_SIGNATURE_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_ENVELOPE_SIGNATURE_ERROR"] = 1009] = "INVALID_ENVELOPE_SIGNATURE_ERROR";
  FvmErrorCode[FvmErrorCode["FVM_INTERNAL_ERROR"] = 1050] = "FVM_INTERNAL_ERROR";
  FvmErrorCode[FvmErrorCode["VALUE_ERROR"] = 1051] = "VALUE_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_ARGUMENT_ERROR"] = 1052] = "INVALID_ARGUMENT_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_ADDRESS_ERROR"] = 1053] = "INVALID_ADDRESS_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_LOCATION_ERROR"] = 1054] = "INVALID_LOCATION_ERROR";
  FvmErrorCode[FvmErrorCode["ACCOUNT_AUTHORIZATION_ERROR"] = 1055] = "ACCOUNT_AUTHORIZATION_ERROR";
  FvmErrorCode[FvmErrorCode["OPERATION_AUTHORIZATION_ERROR"] = 1056] = "OPERATION_AUTHORIZATION_ERROR";
  FvmErrorCode[FvmErrorCode["OPERATION_NOT_SUPPORTED_ERROR"] = 1057] = "OPERATION_NOT_SUPPORTED_ERROR";
  FvmErrorCode[FvmErrorCode["BLOCK_HEIGHT_OUT_OF_RANGE_ERROR"] = 1058] = "BLOCK_HEIGHT_OUT_OF_RANGE_ERROR";
  FvmErrorCode[FvmErrorCode["EXECUTION_ERROR"] = 1100] = "EXECUTION_ERROR";
  FvmErrorCode[FvmErrorCode["CADENCE_RUNTIME_ERROR"] = 1101] = "CADENCE_RUNTIME_ERROR";
  FvmErrorCode[FvmErrorCode["ENCODING_UNSUPPORTED_VALUE"] = 1102] = "ENCODING_UNSUPPORTED_VALUE";
  FvmErrorCode[FvmErrorCode["STORAGE_CAPACITY_EXCEEDED"] = 1103] = "STORAGE_CAPACITY_EXCEEDED";
  FvmErrorCode[FvmErrorCode["GAS_LIMIT_EXCEEDED_ERROR"] = 1104] = "GAS_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode[FvmErrorCode["EVENT_LIMIT_EXCEEDED_ERROR"] = 1105] = "EVENT_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode[FvmErrorCode["LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR"] = 1106] = "LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode[FvmErrorCode["STATE_KEY_SIZE_LIMIT_ERROR"] = 1107] = "STATE_KEY_SIZE_LIMIT_ERROR";
  FvmErrorCode[FvmErrorCode["STATE_VALUE_SIZE_LIMIT_ERROR"] = 1108] = "STATE_VALUE_SIZE_LIMIT_ERROR";
  FvmErrorCode[FvmErrorCode["TRANSACTION_FEE_DEDUCTION_FAILED_ERROR"] = 1109] = "TRANSACTION_FEE_DEDUCTION_FAILED_ERROR";
  FvmErrorCode[FvmErrorCode["COMPUTATION_LIMIT_EXCEEDED_ERROR"] = 1110] = "COMPUTATION_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode[FvmErrorCode["MEMORY_LIMIT_EXCEEDED_ERROR"] = 1111] = "MEMORY_LIMIT_EXCEEDED_ERROR";
  FvmErrorCode[FvmErrorCode["COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE"] = 1112] = "COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE";
  FvmErrorCode[FvmErrorCode["SCRIPT_EXECUTION_TIMED_OUT_ERROR"] = 1113] = "SCRIPT_EXECUTION_TIMED_OUT_ERROR";
  FvmErrorCode[FvmErrorCode["SCRIPT_EXECUTION_CANCELLED_ERROR"] = 1114] = "SCRIPT_EXECUTION_CANCELLED_ERROR";
  FvmErrorCode[FvmErrorCode["EVENT_ENCODING_ERROR"] = 1115] = "EVENT_ENCODING_ERROR";
  FvmErrorCode[FvmErrorCode["INVALID_INTERNAL_STATE_ACCESS_ERROR"] = 1116] = "INVALID_INTERNAL_STATE_ACCESS_ERROR";
  FvmErrorCode[FvmErrorCode["INSUFFICIENT_PAYER_BALANCE"] = 1118] = "INSUFFICIENT_PAYER_BALANCE";
  FvmErrorCode[FvmErrorCode["ACCOUNT_ERROR"] = 1200] = "ACCOUNT_ERROR";
  FvmErrorCode[FvmErrorCode["ACCOUNT_NOT_FOUND_ERROR"] = 1201] = "ACCOUNT_NOT_FOUND_ERROR";
  FvmErrorCode[FvmErrorCode["ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR"] = 1202] = "ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR";
  FvmErrorCode[FvmErrorCode["ACCOUNT_ALREADY_EXISTS_ERROR"] = 1203] = "ACCOUNT_ALREADY_EXISTS_ERROR";
  FvmErrorCode[FvmErrorCode["FROZEN_ACCOUNT_ERROR"] = 1204] = "FROZEN_ACCOUNT_ERROR";
  FvmErrorCode[FvmErrorCode["ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR"] = 1205] = "ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR";
  FvmErrorCode[FvmErrorCode["ACCOUNT_PUBLIC_KEY_LIMIT_ERROR"] = 1206] = "ACCOUNT_PUBLIC_KEY_LIMIT_ERROR";
  FvmErrorCode[FvmErrorCode["CONTRACT_ERROR"] = 1250] = "CONTRACT_ERROR";
  FvmErrorCode[FvmErrorCode["CONTRACT_NOT_FOUND_ERROR"] = 1251] = "CONTRACT_NOT_FOUND_ERROR";
  FvmErrorCode[FvmErrorCode["CONTRACT_NAMES_NOT_FOUND_ERROR"] = 1252] = "CONTRACT_NAMES_NOT_FOUND_ERROR";
  FvmErrorCode[FvmErrorCode["EVM_EXECUTION_ERROR"] = 1300] = "EVM_EXECUTION_ERROR";
  return FvmErrorCode;
}({});

/**
 * Represents different topics that can be subscribed to for real-time data from the Flow blockchain
 */
var SubscriptionTopic = /*#__PURE__*/function (SubscriptionTopic) {
  SubscriptionTopic["BLOCKS"] = "blocks";
  SubscriptionTopic["BLOCK_HEADERS"] = "block_headers";
  SubscriptionTopic["BLOCK_DIGESTS"] = "block_digests";
  SubscriptionTopic["ACCOUNT_STATUSES"] = "account_statuses";
  SubscriptionTopic["TRANSACTION_STATUSES"] = "transaction_statuses";
  SubscriptionTopic["EVENTS"] = "events";
  return SubscriptionTopic;
}({});

/**
 * The data returned by a subscription, which will vary depending on the topic
 */

/**
 * Raw data returned by a subscription, which will vary depending on the topic and is not decoded
 */

/**
 * Arguments for a subscription, which will vary depending on the topic
 */

/**
 * A subscription object that allows managing the subscription lifecycle
 */

var SignatureAlgorithm = /*#__PURE__*/function (SignatureAlgorithm) {
  SignatureAlgorithm[SignatureAlgorithm["ECDSA_P256"] = 1] = "ECDSA_P256";
  SignatureAlgorithm[SignatureAlgorithm["ECDSA_secp256k1"] = 2] = "ECDSA_secp256k1";
  SignatureAlgorithm[SignatureAlgorithm["BLS_BLS12_381"] = 3] = "BLS_BLS12_381";
  return SignatureAlgorithm;
}({});
var HashAlgorithm = /*#__PURE__*/function (HashAlgorithm) {
  HashAlgorithm[HashAlgorithm["SHA2_256"] = 1] = "SHA2_256";
  HashAlgorithm[HashAlgorithm["SHA2_384"] = 2] = "SHA2_384";
  HashAlgorithm[HashAlgorithm["SHA3_256"] = 3] = "SHA3_256";
  HashAlgorithm[HashAlgorithm["SHA3_384"] = 4] = "SHA3_384";
  HashAlgorithm[HashAlgorithm["KMAC128_BLS_BLS12_381"] = 5] = "KMAC128_BLS_BLS12_381";
  return HashAlgorithm;
}({});

/**
 * BlockDigest holds lightweight block information which includes only block id, block height and block timestamp.
 */

/**
 * Header contains all meta-data for a block, as well as a hash representing
 * the combined payload of the entire block. It is what consensus nodes agree
 * on after validating the contents against the payload hash.
 */

/**
 * The execution status of the transaction.
 */
var TransactionExecutionStatus = /*#__PURE__*/function (TransactionExecutionStatus) {
  TransactionExecutionStatus[TransactionExecutionStatus["UNKNOWN"] = 0] = "UNKNOWN";
  TransactionExecutionStatus[TransactionExecutionStatus["PENDING"] = 1] = "PENDING";
  TransactionExecutionStatus[TransactionExecutionStatus["FINALIZED"] = 2] = "FINALIZED";
  TransactionExecutionStatus[TransactionExecutionStatus["EXECUTED"] = 3] = "EXECUTED";
  TransactionExecutionStatus[TransactionExecutionStatus["SEALED"] = 4] = "SEALED";
  TransactionExecutionStatus[TransactionExecutionStatus["EXPIRED"] = 5] = "EXPIRED";
  return TransactionExecutionStatus;
}({});

export { FvmErrorCode, HashAlgorithm, InteractionResolverKind, InteractionStatus, InteractionTag, SignatureAlgorithm, SubscriptionTopic, TransactionExecutionStatus, TransactionRole };
//# sourceMappingURL=typedefs.module.js.map
