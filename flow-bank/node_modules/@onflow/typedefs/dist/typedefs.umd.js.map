{"version":3,"file":"typedefs.umd.js","sources":["../src/interaction.ts","../src/fvm-errors.ts","../src/subscriptions.ts","../src/index.ts"],"sourcesContent":["/**\n * Represents different types of interactions with the Flow blockchain\n */\nexport enum InteractionTag {\n  UNKNOWN = \"UNKNOWN\",\n  SCRIPT = \"SCRIPT\",\n  TRANSACTION = \"TRANSACTION\",\n  GET_TRANSACTION_STATUS = \"GET_TRANSACTION_STATUS\",\n  GET_ACCOUNT = \"GET_ACCOUNT\",\n  GET_EVENTS = \"GET_EVENTS\",\n  PING = \"PING\",\n  GET_TRANSACTION = \"GET_TRANSACTION\",\n  GET_BLOCK = \"GET_BLOCK\",\n  GET_BLOCK_HEADER = \"GET_BLOCK_HEADER\",\n  GET_COLLECTION = \"GET_COLLECTION\",\n  GET_NETWORK_PARAMETERS = \"GET_NETWORK_PARAMETERS\",\n  SUBSCRIBE_EVENTS = \"SUBSCRIBE_EVENTS\",\n  GET_NODE_VERSION_INFO = \"GET_NODE_VERSION_INFO\",\n}\n\n/**\n * Status of an interaction with the Flow blockchain\n */\nexport enum InteractionStatus {\n  BAD = \"BAD\",\n  OK = \"OK\",\n}\n\n/**\n * Represents different roles in a transaction\n */\nexport enum TransactionRole {\n  AUTHORIZER = \"authorizer\",\n  PAYER = \"payer\",\n  PROPOSER = \"proposer\",\n}\n\n/**\n * Represents different kinds of interaction resolvers\n */\nexport enum InteractionResolverKind {\n  ARGUMENT = \"ARGUMENT\",\n  ACCOUNT = \"ACCOUNT\",\n}\n\nexport interface InteractionAccount {\n  /**\n   * The kind of interaction resolver\n   */\n  kind: InteractionResolverKind.ACCOUNT\n  /**\n   * Temporary identifier for the account\n   */\n  tempId: string\n  /**\n   * The address of the account\n   */\n  addr: string | null\n  /**\n   * The key ID used for signing\n   */\n  keyId: number | string | null\n  /**\n   * The sequence number for the account key\n   */\n  sequenceNum: number | null\n  /**\n   * The signature for the account\n   */\n  signature: string | null\n  /**\n   * Function used for signing\n   */\n  signingFunction: any | null\n  /**\n   * Resolver function for the account\n   */\n  resolve: any | null\n  /**\n   * Role of the account in the transaction\n   */\n  role: {\n    /**\n     * Whether this account is a proposer\n     */\n    proposer: boolean\n    /**\n     * Whether this account is an authorizer\n     */\n    authorizer: boolean\n    /**\n     * Whether this account is a payer\n     */\n    payer: boolean\n    /**\n     * Whether this account is a parameter\n     */\n    param?: boolean\n  }\n  /**\n   * Authorization details for the account\n   */\n  authorization: any\n}\n\nexport interface Interaction {\n  /**\n   * The type of interaction\n   */\n  tag: InteractionTag\n  /**\n   * Assigned values for the interaction\n   */\n  assigns: Record<string, any>\n  /**\n   * The status of the interaction\n   */\n  status: InteractionStatus\n  /**\n   * Reason for the current status\n   */\n  reason: string | null\n  /**\n   * Accounts involved in the interaction\n   */\n  accounts: Record<string, InteractionAccount>\n  /**\n   * Parameters for the interaction\n   */\n  params: Record<string, any>\n  /**\n   * Arguments for the interaction\n   */\n  arguments: Record<string, any>\n  /**\n   * Message details for the interaction\n   */\n  message: {\n    /**\n     * The Cadence code to execute\n     */\n    cadence: string\n    /**\n     * Reference block for the transaction\n     */\n    refBlock: string\n    /**\n     * Compute limit for the transaction\n     */\n    computeLimit: number\n    /**\n     * The proposer of the transaction\n     */\n    proposer: string\n    /**\n     * The payer of the transaction\n     */\n    payer: string\n    /**\n     * The authorizations for the transaction\n     */\n    authorizations: string[]\n    /**\n     * Parameters for the message\n     */\n    params: Record<string, any>[]\n    /**\n     * Arguments for the message\n     */\n    arguments: string[]\n  }\n  /**\n   * The proposer of the transaction\n   */\n  proposer: string | null\n  /**\n   * The authorizations for the transaction\n   */\n  authorizations: string[]\n  /**\n   * The payer(s) of the transaction\n   */\n  payer: string[]\n  /**\n   * Event-related information\n   */\n  events: {\n    /**\n     * The type of event to listen for\n     */\n    eventType: string | null\n    /**\n     * Start block for event listening\n     */\n    start: string | number | null\n    /**\n     * End block for event listening\n     */\n    end: string | number | null\n    /**\n     * Specific block IDs to listen for events\n     */\n    blockIds: string[]\n  }\n  /**\n   * Transaction-related information\n   */\n  transaction: {\n    /**\n     * The ID of the transaction\n     */\n    id: string | null\n  }\n  /**\n   * Block-related information\n   */\n  block: {\n    /**\n     * The ID of the block\n     */\n    id: string | null\n    /**\n     * The height of the block\n     */\n    height: string | number | null\n    /**\n     * Whether the block is sealed\n     */\n    isSealed: boolean | null\n  }\n  /**\n   * Account-related information\n   */\n  account: {\n    /**\n     * The address of the account\n     */\n    addr: string | null\n  }\n  /**\n   * Collection-related information\n   */\n  collection: {\n    /**\n     * The ID of the collection\n     */\n    id: string | null\n  }\n  /**\n   * Event subscription information\n   */\n  subscribeEvents: {\n    /**\n     * The event types to subscribe to\n     */\n    eventTypes: string[] | null\n    /**\n     * The addresses to listen for events\n     */\n    addresses: string[] | null\n    /**\n     * The contracts to listen for events\n     */\n    contracts: string[] | null\n    /**\n     * The starting block ID for event subscription\n     */\n    startBlockId: string | null\n    /**\n     * The starting block height for event subscription\n     */\n    startHeight: number | null\n    /**\n     * The heartbeat interval for event subscription\n     */\n    heartbeatInterval: number | null\n  }\n}\n","/**\n * Error codes defined by the Flow Virtual Machine (FVM) for various types of errors that can occur during transaction execution\n */\nexport enum FvmErrorCode {\n  // We use -1 for unknown error in FCL because FVM defines error codes as uint16\n  // This means we have no risk of collision with FVM error codes\n  UNKNOWN_ERROR = -1,\n  // tx validation errors 1000 - 1049\n  // Deprecated: no longer in use\n  TX_VALIDATION_ERROR = 1000,\n  // Deprecated: No longer used.\n  INVALID_TX_BYTE_SIZE_ERROR = 1001,\n  // Deprecated: No longer used.\n  INVALID_REFERENCE_BLOCK_ERROR = 1002,\n  // Deprecated: No longer used.\n  EXPIRED_TRANSACTION_ERROR = 1003,\n  // Deprecated: No longer used.\n  INVALID_SCRIPT_ERROR = 1004,\n  // Deprecated: No longer used.\n  INVALID_GAS_LIMIT_ERROR = 1005,\n  INVALID_PROPOSAL_SIGNATURE_ERROR = 1006,\n  INVALID_PROPOSAL_SEQ_NUMBER_ERROR = 1007,\n  INVALID_PAYLOAD_SIGNATURE_ERROR = 1008,\n  INVALID_ENVELOPE_SIGNATURE_ERROR = 1009,\n\n  // base errors 1050 - 1100\n  // Deprecated: No longer used.\n  FVM_INTERNAL_ERROR = 1050,\n  VALUE_ERROR = 1051,\n  INVALID_ARGUMENT_ERROR = 1052,\n  INVALID_ADDRESS_ERROR = 1053,\n  INVALID_LOCATION_ERROR = 1054,\n  ACCOUNT_AUTHORIZATION_ERROR = 1055,\n  OPERATION_AUTHORIZATION_ERROR = 1056,\n  OPERATION_NOT_SUPPORTED_ERROR = 1057,\n  BLOCK_HEIGHT_OUT_OF_RANGE_ERROR = 1058,\n\n  // execution errors 1100 - 1200\n  // Deprecated: No longer used.\n  EXECUTION_ERROR = 1100,\n  CADENCE_RUNTIME_ERROR = 1101,\n  // Deprecated: No longer used.\n  ENCODING_UNSUPPORTED_VALUE = 1102,\n  STORAGE_CAPACITY_EXCEEDED = 1103,\n  // Deprecated: No longer used.\n  GAS_LIMIT_EXCEEDED_ERROR = 1104,\n  EVENT_LIMIT_EXCEEDED_ERROR = 1105,\n  LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR = 1106,\n  STATE_KEY_SIZE_LIMIT_ERROR = 1107,\n  STATE_VALUE_SIZE_LIMIT_ERROR = 1108,\n  TRANSACTION_FEE_DEDUCTION_FAILED_ERROR = 1109,\n  COMPUTATION_LIMIT_EXCEEDED_ERROR = 1110,\n  MEMORY_LIMIT_EXCEEDED_ERROR = 1111,\n  COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE = 1112,\n  SCRIPT_EXECUTION_TIMED_OUT_ERROR = 1113,\n  SCRIPT_EXECUTION_CANCELLED_ERROR = 1114,\n  EVENT_ENCODING_ERROR = 1115,\n  INVALID_INTERNAL_STATE_ACCESS_ERROR = 1116,\n  // 1117 was never deployed and is free to use\n  INSUFFICIENT_PAYER_BALANCE = 1118,\n\n  // accounts errors 1200 - 1250\n  // Deprecated: No longer used.\n  ACCOUNT_ERROR = 1200,\n  ACCOUNT_NOT_FOUND_ERROR = 1201,\n  ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR = 1202,\n  ACCOUNT_ALREADY_EXISTS_ERROR = 1203,\n  // Deprecated: No longer used.\n  FROZEN_ACCOUNT_ERROR = 1204,\n  // Deprecated: No longer used.\n  ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR = 1205,\n  ACCOUNT_PUBLIC_KEY_LIMIT_ERROR = 1206,\n\n  // contract errors 1250 - 1300\n  // Deprecated: No longer used.\n  CONTRACT_ERROR = 1250,\n  CONTRACT_NOT_FOUND_ERROR = 1251,\n  // Deprecated: No longer used.\n  CONTRACT_NAMES_NOT_FOUND_ERROR = 1252,\n\n  // fvm std lib errors 1300-1400\n  EVM_EXECUTION_ERROR = 1300,\n}\n","import {\n  AccountStatusEvent,\n  Block,\n  BlockDigest,\n  BlockHeader,\n  Event,\n  EventFilter,\n  TransactionExecutionStatus,\n  TransactionStatus,\n} from \".\"\n\n/**\n * Represents different topics that can be subscribed to for real-time data from the Flow blockchain\n */\nexport enum SubscriptionTopic {\n  BLOCKS = \"blocks\",\n  BLOCK_HEADERS = \"block_headers\",\n  BLOCK_DIGESTS = \"block_digests\",\n  ACCOUNT_STATUSES = \"account_statuses\",\n  TRANSACTION_STATUSES = \"transaction_statuses\",\n  EVENTS = \"events\",\n}\n\n/**\n * The data returned by a subscription, which will vary depending on the topic\n */\nexport type SubscriptionData<T extends SubscriptionTopic> =\n  SubscriptionDataMap[T]\n\n/**\n * Raw data returned by a subscription, which will vary depending on the topic and is not decoded\n */\nexport type RawSubscriptionData<T extends SubscriptionTopic> =\n  RawSubscriptionDataMap[T]\n\n/**\n * Arguments for a subscription, which will vary depending on the topic\n */\nexport type SubscriptionArgs<T extends SubscriptionTopic> =\n  SubscriptionArgsMap[T]\n\n/**\n * A subscription object that allows managing the subscription lifecycle\n */\nexport type Subscription = {\n  /**\n   * Function to unsubscribe from the subscription\n   */\n  unsubscribe: () => void\n}\n\ntype SubscriptionArgsMap = {\n  [SubscriptionTopic.BLOCKS]: BlockSubscriptionArgs\n  [SubscriptionTopic.BLOCK_HEADERS]: BlockSubscriptionArgs\n  [SubscriptionTopic.BLOCK_DIGESTS]: BlockSubscriptionArgs\n  [SubscriptionTopic.ACCOUNT_STATUSES]: AccountStatusSubscriptionArgs\n  [SubscriptionTopic.TRANSACTION_STATUSES]: TransactionStatusSubscriptionArgs\n  [SubscriptionTopic.EVENTS]: EventSubscriptionArgs\n}\n\ntype SubscriptionDataMap = {\n  [SubscriptionTopic.EVENTS]: Event\n  [SubscriptionTopic.BLOCKS]: Block\n  [SubscriptionTopic.BLOCK_HEADERS]: BlockHeader\n  [SubscriptionTopic.BLOCK_DIGESTS]: BlockHeader\n  [SubscriptionTopic.ACCOUNT_STATUSES]: AccountStatusEvent\n  [SubscriptionTopic.TRANSACTION_STATUSES]: TransactionStatus\n}\n\ntype RawSubscriptionDataMap = {\n  [SubscriptionTopic.EVENTS]: {\n    event: Omit<Event, \"data\"> & {\n      payload: {\n        type: string\n        value: any\n      }\n    }\n  }\n  [SubscriptionTopic.BLOCKS]: {\n    block: Block\n  }\n  [SubscriptionTopic.BLOCK_HEADERS]: {\n    blockHeader: BlockHeader\n  }\n  [SubscriptionTopic.BLOCK_DIGESTS]: {\n    blockDigest: BlockDigest\n  }\n  [SubscriptionTopic.ACCOUNT_STATUSES]: {\n    accountStatusEvent: Omit<Event, \"data\" | \"blockTimestamp\"> & {\n      payload: {\n        type: string\n        value: any\n      }\n      accountAddress: string\n    }\n  }\n  [SubscriptionTopic.TRANSACTION_STATUSES]: {\n    transactionStatus: {\n      blockId: string\n      status: TransactionExecutionStatus\n      statusString: string\n      statusCode: 0 | 1\n      errorMessage: string\n      events: {\n        type: string\n        transactionId: string\n        transactionIndex: number\n        eventIndex: number\n        payload: {\n          type: string\n          value: any\n        }\n      }[]\n    }\n  }\n}\n\ntype BlockSubscriptionArgs =\n  | {\n      blockStatus: \"finalized\" | \"sealed\"\n      startBlockId?: string\n    }\n  | {\n      blockStatus: \"finalized\" | \"sealed\"\n      startBlockHeight?: number\n    }\n\ntype AccountStatusSubscriptionArgs = {\n  startBlockId?: string\n  startBlockHeight?: number\n  eventTypes?: string[]\n  addresses?: string[]\n  accountAddresses?: string[]\n}\n\ntype TransactionStatusSubscriptionArgs = {\n  transactionId: string\n}\n\ntype EventSubscriptionArgs = EventFilter\n","export interface Account {\n  /**\n   * The address of the account\n   */\n  address: string\n  /**\n   * The FLOW balance of the account in 10^8\n   */\n  balance: number\n  /**\n   * The code of any Cadence contracts stored in the account\n   */\n  code: number\n  /**\n   * Any contracts deployed to this account\n   */\n  contracts: Record<string, string>\n  /**\n   * The keys associated with the account\n   */\n  keys: Array<AccountKey>\n}\n\nexport interface AccountKey {\n  /**\n   * The index of the key in the account\n   */\n  index: number\n  /**\n   * The public key of the account key\n   */\n  publicKey: string\n  /**\n   * The signature algorithm used by the key\n   */\n  signAlgo: SignatureAlgorithm\n  /**\n   * The signature algorithm used by the key as a string\n   */\n  signAlgoString: string\n  /**\n   * The hashing algorithm used by the key\n   */\n  hashAlgo: HashAlgorithm\n  /**\n   * The hashing algorithm used by the key as a string\n   */\n  hashAlgoString: string\n  /**\n   * The sequence number of the key\n   */\n  sequenceNumber: number\n  /**\n   * The weight of the key\n   */\n  weight: number\n  /**\n   * Whether or not the key has been revoked\n   */\n  revoked: boolean\n}\n\nexport enum SignatureAlgorithm {\n  ECDSA_P256 = 1,\n  ECDSA_secp256k1 = 2,\n  BLS_BLS12_381 = 3,\n}\n\nexport enum HashAlgorithm {\n  SHA2_256 = 1,\n  SHA2_384 = 2,\n  SHA3_256 = 3,\n  SHA3_384 = 4,\n  KMAC128_BLS_BLS12_381 = 5,\n}\n\nexport interface Block {\n  /**\n   * The id of the block\n   */\n  id: string\n  /**\n   * The id of the parent block\n   */\n  parentId: string\n  /**\n   * The height of the block\n   */\n  height: number\n  /**\n   * Time related fields\n   */\n  timestamp: string\n  /**\n   * The parent voter signature of the block\n   */\n  parentVoterSignature: string\n  /**\n   * Contains the ids of collections included in the block\n   */\n  collectionGuarantees: Array<CollectionGuarantee>\n  /**\n   * The details of which nodes executed and sealed the blocks\n   */\n  blockSeals: Array<BlockSeal>\n}\nexport interface CollectionGuarantee {\n  /**\n   * The id of the block\n   */\n  collectionId: string\n  /**\n   * The signer ids of the block\n   */\n  signerIds: Array<string>\n}\nexport interface BlockSeal {\n  /**\n   * The id of the block\n   */\n  blockId: string\n  /**\n   * The execution receipt id of the block\n   */\n  executionReceiptId: string\n}\n/**\n * BlockDigest holds lightweight block information which includes only block id, block height and block timestamp.\n */\nexport interface BlockDigest {\n  /**\n   * The id of the block\n   */\n  id: string\n  /**\n   * The height of the block\n   */\n  height: number\n  /**\n   * Timestamp of the block\n   */\n  timestamp: string\n}\n/**\n * Header contains all meta-data for a block, as well as a hash representing\n * the combined payload of the entire block. It is what consensus nodes agree\n * on after validating the contents against the payload hash.\n */\nexport interface BlockHeader {\n  /**\n   * The id of the block\n   */\n  id: string\n  /**\n   * The id of the parent block\n   */\n  parentId: string\n  /**\n   * The height of the block\n   */\n  height: number\n  /**\n   * The timestamp of the block\n   */\n  timestamp: string\n  /**\n   * The parent voter signature of the block\n   */\n  parentVoterSignature: string\n}\nexport interface CompositeSignature {\n  /**\n   * A type identifier used internally by FCL\n   */\n  f_type: string\n  /**\n   * FCL protocol version\n   */\n  f_vsn: string\n  /**\n   * Flow Address (sans prefix)\n   */\n  addr: string\n  /**\n   * Key ID\n   */\n  keyId: number\n  /**\n   * Signature as a hex string\n   */\n  signature: string\n}\nexport interface CurrentUser {\n  /**\n   * The public address of the current user\n   */\n  addr?: string\n  /**\n   * A wallet specified content identifier for user metadata\n   */\n  cid?: string\n  /**\n   * A wallet specified time-frame for a valid session\n   */\n  expiresAt?: number\n  /**\n   * A type identifier used internally by FCL\n   */\n  f_type: string\n  /**\n   * FCL protocol version\n   */\n  f_vsn: string\n  /**\n   * Whether or not the current user is logged in\n   */\n  loggedIn?: boolean\n  /**\n   * A list of trusted services that express ways of interacting with the current user's identity\n   */\n  services: Array<Service>\n}\nexport interface Event {\n  /**\n   * ID of the block that contains the event.\n   */\n  blockId: string\n  /**\n   * Height of the block that contains the event.\n   */\n  blockHeight: number\n  /**\n   * The timestamp of when the block was sealed in a DateString format. eg. '2021-06-25T13:42:04.227Z'\n   */\n  blockTimestamp: string\n  /**\n   * A string containing the event name.\n   */\n  type: string\n  /**\n   * Can be used to query transaction information, eg. via a Flow block explorer.\n   */\n  transactionId: string\n  /**\n   * Used to prevent replay attacks.\n   */\n  transactionIndex: number\n  /**\n   * Used to prevent replay attacks.\n   */\n  eventIndex: number\n  /**\n   * The data emitted from the event.\n   */\n  data: any\n}\nexport interface AccountStatusEvent extends Omit<Event, \"blockTimestamp\"> {\n  /**\n   * The address of the account which the event is associated with.\n   */\n  accountAddress: string\n}\nexport interface Key {\n  /**\n   * Sequence number of key used by the proposer of this transaction\n   */\n  sequenceNumber: number\n  /**\n   * The ID of the key in the account used by the proposer of this transaction\n   */\n  keyId: number\n  /**\n   * The address of the proposer of this transaction\n   */\n  address: string\n}\nexport interface Service {\n  /**\n   * A type identifier used internally by FCL\n   */\n  f_type: string\n  /**\n   * FCL protocol version\n   */\n  f_vsn: string\n  /**\n   * Service type\n   */\n  type: string\n  /**\n   * Service method\n   */\n  method: string\n  /**\n   * Service uid\n   */\n  uid?: string\n  /**\n   * Service endpoint\n   */\n  endpoint: string\n  /**\n   * Service provider object\n   */\n  provider: Provider\n  /**\n   * Service parameters\n   */\n  params: Record<string, string>\n  /**\n   * Service data\n   */\n  data?: Record<string, any>\n  /**\n   * Service headers\n   */\n  headers?: Record<string, string>\n}\nexport interface Signature {\n  /**\n   * Sequence number of the key used to perform this signature.\n   */\n  sequenceNumber: string\n  /**\n   * ID of the key in the account used to perform this signature.\n   */\n  keyId: number\n  /**\n   * The signature represented as a hex string.\n   */\n  signature: string\n}\nexport interface Transaction {\n  /**\n   * The Cadence code used to execute this transaction.\n   */\n  script: string\n  /**\n   * The JSON-CDC encoded arguments passed in to the transaction.\n   */\n  args: Array<string>\n  /**\n   * The reference block id for this transaction.\n   */\n  referenceBlockId: string\n  /**\n   * The gas limit for the transaction.\n   */\n  gasLimit: number\n  /**\n   * The key used by the proposer of this transaction.\n   */\n  proposalKey: Key\n  /**\n   * Sequence number of the key used by the proposer of this transaction.\n   */\n  sequenceNumber: string\n  /**\n   * The ID of the key in the account used by the proposer of this transaction.\n   */\n  keyId: number\n  /**\n   * The address of the proposer of this transaction.\n   */\n  address: string\n  /**\n   * Address of the payer of the transaction.\n   */\n  payer: string\n  /**\n   * Address of the proposer of this transaction.\n   */\n  proposer: string\n  /**\n   * Array of addresses of authorizers of this transaction.\n   */\n  authorizers: Array<string>\n  /**\n   * The payload signatures for the transaction.\n   */\n  payloadSignatures: Array<Signature>\n  /**\n   * The envelope signatures for the transaction.\n   */\n  envelopeSignatures: Array<Signature>\n}\nexport interface TransactionStatus {\n  /**\n   * The ID of the Block the transaction is included in.\n   */\n  blockId: string\n  /**\n   * The execution status of the transaction\n   */\n  status: TransactionExecutionStatus\n  /**\n   * The status as as descriptive text (e.g. \"FINALIZED\").\n   */\n  statusString: string\n  /**\n   * The result of the transaction, if executed (i.e. 0 for success, 1 for failure)\n   */\n  statusCode: 0 | 1\n  /**\n   * The error message of the transaction.\n   */\n  errorMessage: string\n  /**\n   * The events for this result.\n   */\n  events: Array<Event>\n}\n/**\n * The execution status of the transaction.\n */\nexport enum TransactionExecutionStatus {\n  UNKNOWN = 0,\n  PENDING = 1,\n  FINALIZED = 2,\n  EXECUTED = 3,\n  SEALED = 4,\n  EXPIRED = 5,\n}\n/*\n * The Provider type describes a Wallet Provider associated with a specific Service.\n */\nexport interface Provider {\n  /**\n   * The blockchain address of the Wallet provider.\n   */\n  address?: string\n  /**\n   * The name of the Wallet provider.\n   */\n  name?: string\n  /**\n   * The icon of the Wallet provider (may be a URL or a data URI).\n   */\n  icon?: string\n  /**\n   * A brief description of the Wallet provider.\n   */\n  description?: string\n  /**\n   * The preferred color to represent the Wallet provider (e.g., for UI styling).\n   */\n  color?: string\n  /**\n   * The support email address of the Wallet provider.\n   */\n  supportEmail?: string\n  /**\n   * The website URL of the Wallet provider.\n   */\n  website?: string\n  /**\n   * Indicates whether the Wallet provider is installed (if applicable).\n   */\n  is_installed?: boolean\n  /**\n   * Indicates whether the Wallet provider requires installation (if applicable).\n   */\n  requires_install?: boolean\n  /**\n   * The install link for the Wallet provider.\n   */\n  install_link?: string\n}\nexport interface NodeVersionInfo {\n  /**\n   * The semver version of the node.\n   */\n  semver: string\n  /**\n   * The commit hash of the node.\n   */\n  commit: string\n  /**\n   * The spork id of the node.\n   */\n  sporkId: string\n  /**\n   * The protocol version of the node.\n   */\n  protocolVersion: number\n  /**\n   * The spork root block height of the node.\n   */\n  sporkRootBlockHeight: number\n  /**\n   * The node root block height of the node.\n   */\n  nodeRootBlockHeight: number\n}\n\nexport interface StreamConnection<ChannelMap extends {[name: string]: any}> {\n  on<C extends keyof ChannelMap>(\n    channel: C,\n    listener: (data: ChannelMap[C]) => void\n  ): this\n  on(event: \"close\", listener: () => void): this\n  on(event: \"error\", listener: (err: any) => void): this\n  off<C extends keyof ChannelMap>(\n    event: C,\n    listener: (data: ChannelMap[C]) => void\n  ): this\n  off(event: \"close\", listener: () => void): this\n  off(event: \"error\", listener: (err: any) => void): this\n  close(): void\n}\n\nexport interface EventFilter {\n  /**\n   * The event types to listen for\n   */\n  eventTypes?: string[]\n  /**\n   * The addresses to listen for\n   */\n  addresses?: string[]\n  /**\n   * The contracts to listen for\n   */\n  contracts?: string[]\n  /**\n   * The block ID to start listening for events\n   */\n  startBlockId?: string\n  /**\n   * The block height to start listening for events\n   */\n  startHeight?: number\n  /**\n   * The interval in milliseconds to send a heartbeat to the Access Node\n   */\n  heartbeatInterval?: number\n}\n\nexport interface BlockHeartbeat {\n  /**\n   * The ID of the block\n   */\n  blockId: string\n  /**\n   * The height of the block\n   */\n  blockHeight: number\n  /**\n   * The timestamp of the block\n   */\n  timestamp: string\n}\n\nexport type EventStream = StreamConnection<{\n  events: Event[]\n  heartbeat: BlockHeartbeat\n}>\n\nexport * from \"./interaction\"\nexport * from \"./fvm-errors\"\nexport {type SdkTransport} from \"./transport\"\nexport {\n  type SubscriptionArgs,\n  type SubscriptionData,\n  type RawSubscriptionData,\n  type Subscription,\n  SubscriptionTopic,\n} from \"./subscriptions\"\n"],"names":["InteractionTag","InteractionStatus","TransactionRole","InteractionResolverKind","FvmErrorCode","SubscriptionTopic","SignatureAlgorithm","HashAlgorithm","TransactionExecutionStatus"],"mappings":"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"}