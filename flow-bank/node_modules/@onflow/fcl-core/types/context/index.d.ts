import { type CurrentUserServiceApi } from "../current-user";
import { StorageProvider } from "../fcl-core";
import { createSdkClient, SdkClientOptions } from "@onflow/sdk";
interface FCLConfig {
    accessNodeUrl: string;
    transport: SdkClientOptions["transport"];
    customResolver?: SdkClientOptions["customResolver"];
    customDecoders?: SdkClientOptions["customDecoders"];
    flowJson?: any;
    computeLimit: number;
    platform: string;
    discoveryWallet?: string;
    discoveryWalletMethod?: string;
    discoveryAuthnEndpoint?: string;
    discoveryAuthnInclude?: string[];
    flowNetwork?: string;
    storage: StorageProvider;
    discovery?: {
        execStrategy?: (...args: any[]) => any;
    };
    appDetailTitle?: string;
    appDetailIcon?: string;
    appDetailDescription?: string;
    appDetailUrl?: string;
    serviceOpenIdScopes?: string[];
}
export interface ConfigService {
    get: (key: string, defaultValue?: any) => Promise<any>;
    put: (key: string, value: any) => Promise<ConfigService> | ConfigService;
    update: (key: string, updateFn: (oldValue: any) => any) => Promise<ConfigService> | ConfigService;
    delete: (key: string) => Promise<ConfigService> | ConfigService;
    where: (pattern: RegExp) => Promise<Record<string, any>>;
    first: (keys: string[], defaultValue?: any) => Promise<any> | any;
    subscribe: (callback: (config: Record<string, any> | null) => void) => () => void;
    all: () => Promise<Record<string, any>>;
}
/**
 * FCL Context contains the core infrastructure dependencies
 */
export interface FCLContext {
    /** Configuration service for network settings, endpoints, etc. */
    currentUser: CurrentUserServiceApi;
    sdk: ReturnType<typeof createSdkClient>;
    storage: StorageProvider;
    /** Legacy config compatibility layer */
    config: ConfigService;
    platform: string;
}
/**
 * Factory function to create an FCL context
 */
export declare function createFCLContext(config: FCLConfig): FCLContext;
export declare function createConfigService(config: FCLConfig): ConfigService;
export {};
