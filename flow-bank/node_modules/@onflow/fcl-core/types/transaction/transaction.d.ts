import "../default-config";
import { TransactionStatus } from "@onflow/typedefs";
import { FCLContext } from "../context";
export declare function createTransaction(context: Pick<FCLContext, "sdk" | "config">): {
    (transactionId: string, opts?: {
        pollRate?: number;
        txNotFoundTimeout?: number;
    }): {
        snapshot: () => Promise<TransactionStatus>;
        subscribe: (onData: (txStatus: TransactionStatus) => void, onError?: (err: Error) => void) => () => void;
        onceFinalized: () => Promise<TransactionStatus>;
        onceExecuted: () => Promise<TransactionStatus>;
        onceSealed: () => Promise<TransactionStatus>;
    };
    isUnknown: (ix: import("@onflow/typedefs").Interaction) => boolean;
    isPending: (tx: TransactionStatus) => boolean;
    isFinalized: (tx: TransactionStatus) => boolean;
    isExecuted: (tx: TransactionStatus) => boolean;
    isSealed: (tx: TransactionStatus) => boolean;
    isExpired: (tx: TransactionStatus) => boolean;
};
export declare const transaction: {
    (transactionId: string, opts?: {
        pollRate?: number;
        txNotFoundTimeout?: number;
    }): {
        snapshot: () => Promise<TransactionStatus>;
        subscribe: (onData: (txStatus: TransactionStatus) => void, onError?: (err: Error) => void) => () => void;
        onceFinalized: () => Promise<TransactionStatus>;
        onceExecuted: () => Promise<TransactionStatus>;
        onceSealed: () => Promise<TransactionStatus>;
    };
    isUnknown: (ix: import("@onflow/typedefs").Interaction) => boolean;
    isPending: (tx: TransactionStatus) => boolean;
    isFinalized: (tx: TransactionStatus) => boolean;
    isExecuted: (tx: TransactionStatus) => boolean;
    isSealed: (tx: TransactionStatus) => boolean;
    isExpired: (tx: TransactionStatus) => boolean;
};
