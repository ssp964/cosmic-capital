import { SdkTransport } from "@onflow/typedefs";
import { StorageProvider } from "./fcl-core";
export interface FlowClientCoreConfig {
    accessNodeUrl: string;
    flowNetwork?: string;
    flowJson?: Record<string, any>;
    discoveryWallet?: string;
    discoveryWalletMethod?: string;
    discoveryAuthnEndpoint?: string;
    discoveryAuthnInclude?: string[];
    computeLimit: number;
    storage: StorageProvider;
    platform: string;
    discovery?: {
        execStrategy?: (opts: any) => Promise<any>;
    };
    appDetailTitle?: string;
    appDetailIcon?: string;
    appDetailDescription?: string;
    appDetailUrl?: string;
    serviceOpenIdScopes?: string[];
    transport?: SdkTransport;
    customResolver?: any;
    customDecoders?: any;
}
export declare function createFlowClientCore(params: FlowClientCoreConfig): {
    send: (args?: (import("@onflow/sdk").InteractionBuilderFn | false) | (import("@onflow/sdk").InteractionBuilderFn | false)[], opts?: any) => Promise<any>;
    subscribe: <T extends import("@onflow/typedefs").SubscriptionTopic>({ topic, args, onData, onError }: import("@onflow/sdk/types/transport").SubscribeParams<T>, opts?: {
        node?: string;
        transport?: import("@onflow/typedefs").SdkTransport;
    }) => import("@onflow/typedefs").Subscription;
    subscribeRaw: <T extends import("@onflow/typedefs").SubscriptionTopic>({ topic, args, onData, onError }: import("@onflow/sdk/types/transport").SubscribeRawParams<T>, opts?: {
        node?: string;
        transport?: import("@onflow/typedefs").SdkTransport;
    }) => {
        unsubscribe: () => void;
    };
    account: (address: string, { height, id, isSealed }?: import("@onflow/sdk/types/account/account").AccountQueryOptions, opts?: object) => Promise<import("@onflow/typedefs").Account>;
    block: ({ sealed, id, height }?: import("@onflow/sdk/types/block/block").BlockQueryOptions, opts?: object) => Promise<import("@onflow/typedefs").Block>;
    resolve: (ix: import("@onflow/typedefs").Interaction) => Promise<import("@onflow/typedefs").Interaction>;
    decode: (response: any) => Promise<any>;
    currentUser: import("./current-user").CurrentUserServiceApi;
    mutate: (opts?: import("./exec/mutate").MutateOptions) => Promise<string>;
    query: (opts?: import("./exec/query-raw").QueryOptions) => Promise<any>;
    queryRaw: (opts?: import("./exec/query-raw").QueryOptions) => Promise<any>;
    verifyUserSignatures: (message: string, compSigs: import("@onflow/typedefs").CompositeSignature[], opts?: import("./fcl-core").VerifySignaturesScriptOptions) => Promise<boolean>;
    getChainId: (opts?: import("./utils/chain-id/get-chain-id").GetChainIdOptions) => Promise<string>;
    tx: {
        (transactionId: string, opts?: {
            pollRate?: number;
            txNotFoundTimeout?: number;
        }): {
            snapshot: () => Promise<import("@onflow/typedefs").TransactionStatus>;
            subscribe: (onData: (txStatus: import("@onflow/typedefs").TransactionStatus) => void, onError?: (err: Error) => void) => () => void;
            onceFinalized: () => Promise<import("@onflow/typedefs").TransactionStatus>;
            onceExecuted: () => Promise<import("@onflow/typedefs").TransactionStatus>;
            onceSealed: () => Promise<import("@onflow/typedefs").TransactionStatus>;
        };
        isUnknown: (ix: import("@onflow/typedefs").Interaction) => boolean;
        isPending: (tx: import("@onflow/typedefs").TransactionStatus) => boolean;
        isFinalized: (tx: import("@onflow/typedefs").TransactionStatus) => boolean;
        isExecuted: (tx: import("@onflow/typedefs").TransactionStatus) => boolean;
        isSealed: (tx: import("@onflow/typedefs").TransactionStatus) => boolean;
        isExpired: (tx: import("@onflow/typedefs").TransactionStatus) => boolean;
    };
    events: (filterOrType?: import("@onflow/typedefs").EventFilter | string) => {
        subscribe: (onData: (event: import("@onflow/typedefs").Event) => void, onError?: (error: Error) => void) => (() => void);
    };
    authenticate: (opts?: import("./current-user").AuthenticationOptions) => Promise<import("@onflow/typedefs").CurrentUser>;
    unauthenticate: () => void;
    signUserMessage: (msg: string) => Promise<import("@onflow/typedefs").CompositeSignature[]>;
    serialize: (args: (import("@onflow/sdk").InteractionBuilderFn | false)[] | import("@onflow/typedefs").Interaction, opts?: import("./serialize").SerializeOptions) => Promise<string>;
};
