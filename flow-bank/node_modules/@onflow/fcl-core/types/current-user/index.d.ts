import { Account, CompositeSignature, CurrentUser, Service } from "@onflow/typedefs";
import "../default-config";
import { StorageProvider } from "../utils/storage";
import { FCLContext } from "../context";
export interface CurrentUserConfig {
    platform: string;
    discovery?: {
        execStrategy?: (...args: any[]) => any;
    };
    getStorageProvider: () => Promise<StorageProvider>;
}
export interface CurrentUserContext extends Pick<FCLContext, "config" | "sdk"> {
    platform: string;
    getStorageProvider: () => Promise<StorageProvider>;
    discovery?: {
        execStrategy?: (...args: any[]) => any;
    };
    actorName: string;
}
export interface CurrentUserServiceApi {
    authenticate: (opts?: AuthenticationOptions) => Promise<CurrentUser>;
    unauthenticate: () => void;
    authorization: (account: Account) => Promise<Account>;
    signUserMessage: (msg: string) => Promise<CompositeSignature[]>;
    subscribe: (callback: (user: CurrentUser) => void) => () => void;
    snapshot: () => Promise<CurrentUser>;
    resolveArgument: () => Promise<string>;
}
export interface CurrentUserService extends CurrentUserServiceApi {
    (): CurrentUserServiceApi;
}
export interface AccountProofData {
    appIdentifier: string;
    nonce: string;
    [key: string]: any;
}
export interface AuthenticationOptions {
    service?: Service;
    redir?: boolean;
    forceReauth?: boolean;
}
export interface MakeConfigOptions {
    discoveryAuthnInclude?: string[];
    discoveryAuthnExclude?: string[];
    discoveryFeaturesSuggested?: string[];
}
/**
 * @description Type guard function that checks if a value is a function. This is a simple utility
 * used internally by FCL for type checking and validation.
 *
 * @param d The value to check
 * @returns True if the value is a function, false otherwise
 *
 * @example
 * // Check if a value is a function
 * const callback = () => console.log("Hello")
 * const notCallback = "string"
 *
 * console.log(isFn(callback)) // true
 * console.log(isFn(notCallback)) // false
 */
export declare const isFn: (d: any) => boolean;
declare const createUser: (context: Pick<FCLContext, "config" | "sdk" | "storage"> & {
    platform: string;
    discovery?: {
        execStrategy?: (...args: any[]) => any;
    };
}) => CurrentUserService;
/**
 * @description Creates and configures the Current User service for managing user authentication and
 * authorization in Flow applications. This is the core service for handling user sessions, wallet
 * connections, transaction signing, and user data management. The service provides both callable
 * function interface and object methods for maximum flexibility.
 *
 * @param config Configuration object for the current user service
 * @param config.platform Platform identifier (e.g., "web", "mobile", "extension")
 * @param config.discovery Optional discovery configuration for wallet services
 * @param config.getStorageProvider Optional function to provide custom storage implementation
 *
 * @returns Current user service object with authentication and authorization methods
 *
 * @example
 * // Basic setup and authentication
 * import * as fcl from "@onflow/fcl"
 *
 * // Configure FCL
 * fcl.config({
 *   "accessNode.api": "https://rest-testnet.onflow.org",
 *   "discovery.wallet": "https://fcl-discovery.onflow.org/testnet/authn"
 * })
 *
 * // Create current user service
 * const currentUser = fcl.getCurrentUser({
 *   platform: "web"
 * })
 *
 * // Authenticate user
 * const user = await currentUser.authenticate()
 * console.log("Authenticated user:", user.addr)
 *
 * // Subscribe to authentication state changes
 * const currentUser = fcl.getCurrentUser({ platform: "web" })
 *
 * const unsubscribe = currentUser.subscribe((user) => {
 *   if (user.loggedIn) {
 *     console.log("User logged in:", user.addr)
 *     document.getElementById("login-btn").style.display = "none"
 *     document.getElementById("logout-btn").style.display = "block"
 *   } else {
 *     console.log("User logged out")
 *     document.getElementById("login-btn").style.display = "block"
 *     document.getElementById("logout-btn").style.display = "none"
 *   }
 * })
 *
 * // Clean up subscription
 * window.addEventListener("beforeunload", () => unsubscribe())
 *
 * // Sign transactions with user authorization
 * const currentUser = fcl.getCurrentUser({ platform: "web" })
 *
 * const txId = await fcl.mutate({
 *   cadence: `
 *     transaction(amount: UFix64, to: Address) {
 *       prepare(signer: AuthAccount) {
 *         // Transfer tokens logic here
 *       }
 *     }
 *   `,
 *   args: (arg, t) => [
 *     arg("10.0", t.UFix64),
 *     arg("0x01", t.Address)
 *   ],
 *   authz: currentUser.authorization
 * })
 *
 * // Sign custom messages
 * const currentUser = fcl.getCurrentUser({ platform: "web" })
 *
 * const message = Buffer.from("Hello, Flow!").toString("hex")
 * const signatures = await currentUser.signUserMessage(message)
 *
 * console.log("Message signatures:", signatures)
 */
declare const getCurrentUser: (cfg: CurrentUserConfig) => CurrentUserService;
export { createUser, getCurrentUser };
