import { Service } from "@onflow/typedefs";
export interface ServiceMethodOptions {
    "HTTP/GET": "GET";
    "HTTP/POST": "POST";
}
/**
 * @description Continuously polls a service endpoint until it receives an APPROVED or DECLINED
 * response. This function handles the asynchronous nature of wallet interactions by repeatedly
 * checking for status updates with appropriate delays.
 *
 * @param service The service configuration containing the polling endpoint
 * @param checkCanContinue Optional function to control whether polling should continue
 * @returns Promise resolving to the final response data when approved or rejected
 *
 * @example
 * // Poll a service for completion
 * const result = await poll(pollingService, () => !userCancelled)
 * console.log(result) // Final response data
 */
export declare function poll(service: Service, checkCanContinue?: () => boolean): Promise<any>;
