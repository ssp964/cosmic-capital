import { serviceEndpoint } from "../strategies/utils/service-endpoint";
import { Service } from "@onflow/typedefs";
export interface ExecHttpPostParams {
    service: Service & {
        data?: Record<string, any>;
        type: string;
    };
    body: Record<string, any>;
    config: Record<string, any>;
    opts: Record<string, any>;
}
export type ExecLocalFunction = (view: any, options: {
    serviceEndpoint: typeof serviceEndpoint;
    onClose: () => void;
}) => Promise<[any, () => void]>;
/**
 * @description Creates an HTTP POST strategy executor that handles wallet service communication
 * via HTTP POST requests. This function manages the full lifecycle including polling for
 * responses, handling local views, and managing user interactions.
 *
 * @param execLocal Function to execute local view rendering and user interaction
 * @returns HTTP POST strategy function that can be used to execute services
 *
 * @example
 * // Create an HTTP POST executor
 * const httpPostExec = getExecHttpPost(async (view, { serviceEndpoint, onClose }) => {
 *   // Render local view and return cleanup function
 *   return [viewData, () => cleanup()]
 * })
 */
export declare const getExecHttpPost: (execLocal: ExecLocalFunction) => ({ service, body, config, opts }: ExecHttpPostParams) => Promise<any>;
