import type { ConfigService } from "../context";
import type { StorageProvider } from "../utils/storage";
import type { CurrentUserServiceApi } from "../current-user";
import * as sdk from "@onflow/sdk";
import type { createSdkClient } from "@onflow/sdk";
/**
 * Creates a mock SDK client for testing
 *
 * This provides a fully mocked version of the SDK client with jest mock functions
 * for all methods. Each method is mocked to use the actual SDK implementation by default,
 * but you can override any method's behavior by providing custom implementations
 * in the overrides parameter.
 *
 * @example
 * // Mock the send method to return a specific response
 * const sdk = createMockSdkClient({
 *   send: jest.fn().mockResolvedValue({
 *     blockId: "123",
 *     transactionId: "abc"
 *   })
 * })
 *
 * @param overrides - Custom implementations for SDK methods
 * @returns A mocked SDK client instance
 */
export declare function createMockSdkClient(overrides?: Partial<ReturnType<typeof createSdkClient>>): jest.Mocked<ReturnType<typeof createSdkClient>>;
/**
 * Creates an in-memory storage provider for testing
 */
export declare function createMockStorage(): StorageProvider;
/**
 * Creates a mock config service for testing
 */
export declare function createMockConfigService(initialValues?: Record<string, any>): ConfigService;
/**
 * Creates a mock current user for testing
 */
export declare function createMockCurrentUser(override?: Partial<CurrentUserServiceApi>): CurrentUserServiceApi;
/**
 * Creates a fully mocked FCL context for testing
 *
 * This creates a complete mock context with all dependencies needed for testing FCL
 * functions that require an FCLContext. Each component (storage, config, currentUser, sdk)
 * is mocked with reasonable defaults that can be customized through the options parameter.
 *
 * @example
 * // Create a mock context with customized config values and SDK behavior
 * const context = createMockContext({
 *   configValues: {
 *     "accessNode.api": "https://rest-testnet.onflow.org",
 *     "flowNetwork": "testnet"
 *   },
 *   sdkOverrides: {
 *     send: jest.fn().mockResolvedValue({ ... }),
 *     getAccount: jest.fn().mockResolvedValue({ ... })
 *   }
 * })
 *
 * // Use with a context-aware function
 * const result = await myContextAwareFunction(context)
 */
export declare function createMockContext(options?: {
    configValues?: {
        platform?: string;
        discoveryWallet?: string;
        discoveryWalletMethod?: string;
        defaultComputeLimit?: number;
        flowNetwork?: string;
        serviceOpenIdScopes?: string[];
        walletconnectProjectId?: string;
        walletconnectDisableNotifications?: boolean;
        "accessNode.api"?: string;
        "fcl.limit"?: number;
        "discovery.authn.endpoint"?: string;
        "discovery.authn.include"?: string[];
        "discovery.authn.exclude"?: string[];
        "discovery.features.suggested"?: string[];
        "fcl.authz"?: any;
        [key: string]: any;
    };
    currentUser?: Partial<CurrentUserServiceApi>;
    storage?: StorageProvider;
    sdkOverrides?: Partial<ReturnType<typeof createSdkClient>>;
}): {
    storage: StorageProvider;
    config: ConfigService;
    currentUser: CurrentUserServiceApi;
    sdk: jest.Mocked<{
        send: (args?: (import("@onflow/sdk").InteractionBuilderFn | false) | (import("@onflow/sdk").InteractionBuilderFn | false)[], opts?: any) => Promise<any>;
        subscribe: <T extends import("@onflow/typedefs").SubscriptionTopic>({ topic, args, onData, onError }: import("@onflow/sdk/types/transport").SubscribeParams<T>, opts?: {
            node?: string;
            transport?: import("@onflow/typedefs").SdkTransport;
        }) => import("@onflow/typedefs").Subscription;
        subscribeRaw: <T extends import("@onflow/typedefs").SubscriptionTopic>({ topic, args, onData, onError }: import("@onflow/sdk/types/transport").SubscribeRawParams<T>, opts?: {
            node?: string;
            transport?: import("@onflow/typedefs").SdkTransport;
        }) => {
            unsubscribe: () => void;
        };
        account: (address: string, { height, id, isSealed }?: import("@onflow/sdk/types/account/account").AccountQueryOptions, opts?: object) => Promise<import("@onflow/typedefs").Account>;
        block: ({ sealed, id, height }?: import("@onflow/sdk/types/block/block").BlockQueryOptions, opts?: object) => Promise<import("@onflow/typedefs").Block>;
        resolve: (ix: import("@onflow/typedefs").Interaction) => Promise<import("@onflow/typedefs").Interaction>;
        decode: (response: any) => Promise<any>;
    }>;
};
